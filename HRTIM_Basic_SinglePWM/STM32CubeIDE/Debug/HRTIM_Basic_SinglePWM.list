
HRTIM_Basic_SinglePWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ca8  08002ca8  00003ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb8  08002cb8  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb8  08002cb8  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb8  08002cb8  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb8  08002cb8  00003cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cbc  08002cbc  00003cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002cc0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000014  08002cd4  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002cd4  00004134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000b81b  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000087  00000000  00000000  0000f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000b138  00000000  00000000  0000f8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000176a  00000000  00000000  0001aa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b00  00000000  00000000  0001c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00104df5  00000000  00000000  0001cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000086a  00000000  00000000  00121a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00025f91  00000000  00000000  001222e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148278  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e00  00000000  00000000  001482bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c90 	.word	0x08002c90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08002c90 	.word	0x08002c90

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f000 fb3b 	bl	80008bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f002 fcff 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 f80f 	bl	800026c <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800025c:	08002cc0 	.word	0x08002cc0
  ldr r2, =_sbss
 8000260:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000264:	20000134 	.word	0x20000134

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 fb3a 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f842 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 f982 	bl	8000580 <MX_GPIO_Init>
  MX_HRTIM1_Init();
 800027c:	f000 f888 	bl	8000390 <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */

  /* LED2 toggles during the demo */
  BSP_LED_Init(LED2);
 8000280:	2000      	movs	r0, #0
 8000282:	f000 fab9 	bl	80007f8 <BSP_LED_Init>

  /* Enable HRTIM's outputs TD1 and start Timer D */
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD1);
 8000286:	2140      	movs	r1, #64	@ 0x40
 8000288:	4817      	ldr	r0, [pc, #92]	@ (80002e8 <main+0x7c>)
 800028a:	f001 fa8a 	bl	80017a2 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD2);
 800028e:	2180      	movs	r1, #128	@ 0x80
 8000290:	4815      	ldr	r0, [pc, #84]	@ (80002e8 <main+0x7c>)
 8000292:	f001 fa86 	bl	80017a2 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_D);
 8000296:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800029a:	4813      	ldr	r0, [pc, #76]	@ (80002e8 <main+0x7c>)
 800029c:	f001 faae 	bl	80017fc <HAL_HRTIM_WaveformCountStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    BSP_LED_Toggle(LED2);
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 faf5 	bl	8000890 <BSP_LED_Toggle>
    HAL_Delay(1000);
 80002a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002aa:	f000 fb8d 	bl	80009c8 <HAL_Delay>
    //    duty_percent=30;
    compare = (uint32_t)((duty_percent / 100.0f) * (float)TIMD_PERIOD);
 80002ae:	4b0f      	ldr	r3, [pc, #60]	@ (80002ec <main+0x80>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	ee07 3a90 	vmov	s15, r3
 80002b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002ba:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80002f0 <main+0x84>
 80002be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80002f4 <main+0x88>
 80002c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002ce:	ee17 2a90 	vmov	r2, s15
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <main+0x8c>)
 80002d4:	601a      	str	r2, [r3, #0]
    __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, compare);
 80002d6:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <main+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a07      	ldr	r2, [pc, #28]	@ (80002f8 <main+0x8c>)
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    BSP_LED_Toggle(LED2);
 80002e2:	bf00      	nop
 80002e4:	e7dc      	b.n	80002a0 <main+0x34>
 80002e6:	bf00      	nop
 80002e8:	20000030 	.word	0x20000030
 80002ec:	20000000 	.word	0x20000000
 80002f0:	42c80000 	.word	0x42c80000
 80002f4:	47548000 	.word	0x47548000
 80002f8:	2000012c 	.word	0x2000012c

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b094      	sub	sp, #80	@ 0x50
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2238      	movs	r2, #56	@ 0x38
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fc94 	bl	8002c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800031e:	2000      	movs	r0, #0
 8000320:	f001 fee0 	bl	80020e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	2301      	movs	r3, #1
 8000326:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	2303      	movs	r3, #3
 8000334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000336:	2306      	movs	r3, #6
 8000338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800033a:	2355      	movs	r3, #85	@ 0x55
 800033c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800033e:	2302      	movs	r3, #2
 8000340:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f001 ff7c 	bl	800224c <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800035a:	f000 f98f 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2303      	movs	r3, #3
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2104      	movs	r1, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fa7a 	bl	8002870 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000382:	f000 f97b 	bl	800067c <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3750      	adds	r7, #80	@ 0x50
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b0ae      	sub	sp, #184	@ 0xb8
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000396:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80003a4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]
 80003b6:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80003b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80003bc:	2260      	movs	r2, #96	@ 0x60
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f002 fc39 	bl	8002c38 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80003c6:	f107 0320 	add.w	r3, r7, #32
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80003d2:	463b      	mov	r3, r7
 80003d4:	2220      	movs	r2, #32
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f002 fc2d 	bl	8002c38 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80003de:	4b66      	ldr	r3, [pc, #408]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 80003e0:	4a66      	ldr	r2, [pc, #408]	@ (800057c <MX_HRTIM1_Init+0x1ec>)
 80003e2:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80003e4:	4b64      	ldr	r3, [pc, #400]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80003ea:	4b63      	ldr	r3, [pc, #396]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80003f0:	4861      	ldr	r0, [pc, #388]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 80003f2:	f000 fdf3 	bl	8000fdc <HAL_HRTIM_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_HRTIM1_Init+0x70>
  {
    Error_Handler();
 80003fc:	f000 f93e 	bl	800067c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000400:	210c      	movs	r1, #12
 8000402:	485d      	ldr	r0, [pc, #372]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 8000404:	f000 feba 	bl	800117c <HAL_HRTIM_DLLCalibrationStart>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_HRTIM1_Init+0x82>
  {
    Error_Handler();
 800040e:	f000 f935 	bl	800067c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000412:	210a      	movs	r1, #10
 8000414:	4858      	ldr	r0, [pc, #352]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 8000416:	f000 ff09 	bl	800122c <HAL_HRTIM_PollForDLLCalibration>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_HRTIM1_Init+0x94>
  {
    Error_Handler();
 8000420:	f000 f92c 	bl	800067c <Error_Handler>
  }
  pTimeBaseCfg.Period = TIMD_PERIOD;
 8000424:	f24d 4380 	movw	r3, #54400	@ 0xd480
 8000428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000432:	2300      	movs	r3, #0
 8000434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000438:	2308      	movs	r3, #8
 800043a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 800043e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000442:	461a      	mov	r2, r3
 8000444:	2103      	movs	r1, #3
 8000446:	484c      	ldr	r0, [pc, #304]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 8000448:	f000 ff24 	bl	8001294 <HAL_HRTIM_TimeBaseConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_HRTIM1_Init+0xc6>
  {
    Error_Handler();
 8000452:	f000 f913 	bl	800067c <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000456:	2300      	movs	r3, #0
 8000458:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 800045c:	2300      	movs	r3, #0
 800045e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000462:	2300      	movs	r3, #0
 8000464:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8000468:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800046c:	461a      	mov	r2, r3
 800046e:	2103      	movs	r1, #3
 8000470:	4841      	ldr	r0, [pc, #260]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 8000472:	f000 ffc4 	bl	80013fe <HAL_HRTIM_WaveformTimerControl>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_HRTIM1_Init+0xf0>
  {
    Error_Handler();
 800047c:	f000 f8fe 	bl	800067c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000480:	2300      	movs	r3, #0
 8000482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000484:	2300      	movs	r3, #0
 8000486:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000488:	2300      	movs	r3, #0
 800048a:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800048c:	2300      	movs	r3, #0
 800048e:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMASize = 0x1;
 8000490:	2301      	movs	r3, #1
 8000492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000494:	2300      	movs	r3, #0
 8000496:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000498:	2300      	movs	r3, #0
 800049a:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800049c:	2300      	movs	r3, #0
 800049e:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80004a0:	2300      	movs	r3, #0
 80004a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80004a8:	2300      	movs	r3, #0
 80004aa:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80004b4:	2300      	movs	r3, #0
 80004b6:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80004b8:	2300      	movs	r3, #0
 80004ba:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80004bc:	2300      	movs	r3, #0
 80004be:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80004c4:	2300      	movs	r3, #0
 80004c6:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80004c8:	2300      	movs	r3, #0
 80004ca:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80004dc:	2300      	movs	r3, #0
 80004de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80004e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004e6:	461a      	mov	r2, r3
 80004e8:	2103      	movs	r1, #3
 80004ea:	4823      	ldr	r0, [pc, #140]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 80004ec:	f000 fefa 	bl	80012e4 <HAL_HRTIM_WaveformTimerConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_HRTIM1_Init+0x16a>
  {
    Error_Handler();
 80004f6:	f000 f8c1 	bl	800067c <Error_Handler>
  }
  pCompareCfg.CompareValue = 0xFFDF;
 80004fa:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 80004fe:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000500:	f107 0320 	add.w	r3, r7, #32
 8000504:	2201      	movs	r2, #1
 8000506:	2103      	movs	r1, #3
 8000508:	481b      	ldr	r0, [pc, #108]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 800050a:	f000 ffab 	bl	8001464 <HAL_HRTIM_WaveformCompareConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_HRTIM1_Init+0x188>
  {
    Error_Handler();
 8000514:	f000 f8b2 	bl	800067c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000518:	2300      	movs	r3, #0
 800051a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800051c:	2304      	movs	r3, #4
 800051e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000520:	2308      	movs	r3, #8
 8000522:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000528:	2300      	movs	r3, #0
 800052a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000534:	2300      	movs	r3, #0
 8000536:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	2240      	movs	r2, #64	@ 0x40
 800053c:	2103      	movs	r1, #3
 800053e:	480e      	ldr	r0, [pc, #56]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 8000540:	f001 f8fe 	bl	8001740 <HAL_HRTIM_WaveformOutputConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_HRTIM1_Init+0x1be>
  {
    Error_Handler();
 800054a:	f000 f897 	bl	800067c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800054e:	2302      	movs	r3, #2
 8000550:	603b      	str	r3, [r7, #0]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	2280      	movs	r2, #128	@ 0x80
 8000556:	2103      	movs	r1, #3
 8000558:	4807      	ldr	r0, [pc, #28]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 800055a:	f001 f8f1 	bl	8001740 <HAL_HRTIM_WaveformOutputConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_HRTIM1_Init+0x1d8>
  {
    Error_Handler();
 8000564:	f000 f88a 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000568:	4803      	ldr	r0, [pc, #12]	@ (8000578 <MX_HRTIM1_Init+0x1e8>)
 800056a:	f000 f8d3 	bl	8000714 <HAL_HRTIM_MspPostInit>

}
 800056e:	bf00      	nop
 8000570:	37b8      	adds	r7, #184	@ 0xb8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000030 	.word	0x20000030
 800057c:	40016800 	.word	0x40016800

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <MX_GPIO_Init+0xf4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a36      	ldr	r2, [pc, #216]	@ (8000674 <MX_GPIO_Init+0xf4>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b34      	ldr	r3, [pc, #208]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ae:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a30      	ldr	r2, [pc, #192]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005b4:	f043 0320 	orr.w	r3, r3, #32
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	f003 0320 	and.w	r3, r3, #32
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a24      	ldr	r2, [pc, #144]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <MX_GPIO_Init+0xf4>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fe:	f000 fc97 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000602:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000608:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4817      	ldr	r0, [pc, #92]	@ (8000678 <MX_GPIO_Init+0xf8>)
 800061a:	f000 fb07 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061e:	2320      	movs	r3, #32
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f000 faf8 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800063c:	2330      	movs	r3, #48	@ 0x30
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800064c:	2307      	movs	r3, #7
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4808      	ldr	r0, [pc, #32]	@ (8000678 <MX_GPIO_Init+0xf8>)
 8000658:	f000 fae8 	bl	8000c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2028      	movs	r0, #40	@ 0x28
 8000662:	f000 faae 	bl	8000bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000666:	2028      	movs	r0, #40	@ 0x28
 8000668:	f000 fac5 	bl	8000bf6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	@ 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	48000800 	.word	0x48000800

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* Turn LED2 (GREEN) on */
  BSP_LED_On(LED2);
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f8ef 	bl	8000864 <BSP_LED_On>
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000686:	bf00      	nop
 8000688:	e7fd      	b.n	8000686 <Error_Handler+0xa>
	...

0800068c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <HAL_MspInit+0x44>)
 8000694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <HAL_MspInit+0x44>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6613      	str	r3, [r2, #96]	@ 0x60
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <HAL_MspInit+0x44>)
 80006ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ae:	4a08      	ldr	r2, [pc, #32]	@ (80006d0 <HAL_MspInit+0x44>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006c2:	f001 fdb3 	bl	800222c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_HRTIM_MspInit+0x38>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d10b      	bne.n	80006fe <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_HRTIM_MspInit+0x3c>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ea:	4a09      	ldr	r2, [pc, #36]	@ (8000710 <HAL_HRTIM_MspInit+0x3c>)
 80006ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006f2:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <HAL_HRTIM_MspInit+0x3c>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40016800 	.word	0x40016800
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <HAL_HRTIM_MspPostInit+0x64>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d11c      	bne.n	8000770 <HAL_HRTIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_HRTIM_MspPostInit+0x68>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a10      	ldr	r2, [pc, #64]	@ (800077c <HAL_HRTIM_MspPostInit+0x68>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_HRTIM_MspPostInit+0x68>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PB14     ------> HRTIM1_CHD1
    PB15     ------> HRTIM1_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800074e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000752:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000760:	230d      	movs	r3, #13
 8000762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <HAL_HRTIM_MspPostInit+0x6c>)
 800076c:	f000 fa5e 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40016800 	.word	0x40016800
 800077c:	40021000 	.word	0x40021000
 8000780:	48000400 	.word	0x48000400

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	bf00      	nop
 8000798:	e7fd      	b.n	8000796 <HardFault_Handler+0x4>

0800079a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	bf00      	nop
 80007a8:	e7fd      	b.n	80007a6 <BusFault_Handler+0x4>

080007aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ae:	bf00      	nop
 80007b0:	e7fd      	b.n	80007ae <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f8d4 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007f0:	f000 fbd0 	bl	8000f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <BSP_LED_Init+0x64>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <BSP_LED_Init+0x64>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <BSP_LED_Init+0x64>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800081a:	2320      	movs	r3, #32
 800081c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <BSP_LED_Init+0x68>)
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	f107 020c 	add.w	r2, r7, #12
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f9f7 	bl	8000c2c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <BSP_LED_Init+0x68>)
 8000842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000846:	2120      	movs	r1, #32
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fb70 	bl	8000f30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	20000004 	.word	0x20000004

08000864 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <BSP_LED_On+0x28>)
 8000872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000876:	2120      	movs	r1, #32
 8000878:	2201      	movs	r2, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fb58 	bl	8000f30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000004 	.word	0x20000004

08000890 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <BSP_LED_Toggle+0x28>)
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	2220      	movs	r2, #32
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fb5a 	bl	8000f60 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000004 	.word	0x20000004

080008bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <SystemInit+0x28>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <SystemInit+0x28>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d0:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <SystemInit+0x28>)
 80008d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008d6:	609a      	str	r2, [r3, #8]
#endif
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 f95a 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f80d 	bl	8000918 <HAL_InitTick>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	e001      	b.n	800090e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800090a:	f7ff febf 	bl	800068c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090e:	79fb      	ldrb	r3, [r7, #7]

}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000924:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_InitTick+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d022      	beq.n	8000972 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_InitTick+0x6c>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <HAL_InitTick+0x68>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000938:	fbb1 f3f3 	udiv	r3, r1, r3
 800093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f966 	bl	8000c12 <HAL_SYSTICK_Config>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10f      	bne.n	800096c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d809      	bhi.n	8000966 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000952:	2200      	movs	r2, #0
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	f04f 30ff 	mov.w	r0, #4294967295
 800095a:	f000 f932 	bl	8000bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <HAL_InitTick+0x70>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e007      	b.n	8000976 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e004      	b.n	8000976 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e001      	b.n	8000976 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000010 	.word	0x20000010
 8000984:	20000008 	.word	0x20000008
 8000988:	2000000c 	.word	0x2000000c

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_IncTick+0x1c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_IncTick+0x20>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a03      	ldr	r2, [pc, #12]	@ (80009a8 <HAL_IncTick+0x1c>)
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20000130 	.word	0x20000130
 80009ac:	20000010 	.word	0x20000010

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000130 	.word	0x20000130

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d004      	beq.n	80009ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_Delay+0x40>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ec:	bf00      	nop
 80009ee:	f7ff ffdf 	bl	80009b0 <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d8f7      	bhi.n	80009ee <HAL_Delay+0x26>
  {
  }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000010 	.word	0x20000010

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db0b      	blt.n	8000a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 021f 	and.w	r2, r3, #31
 8000a88:	4907      	ldr	r1, [pc, #28]	@ (8000aa8 <__NVIC_EnableIRQ+0x38>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	@ (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	@ (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	@ 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff29 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff40 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff90 	bl	8000b00 <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5f 	bl	8000aac <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff33 	bl	8000a70 <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa4 	bl	8000b68 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c3a:	e15a      	b.n	8000ef2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 814c 	beq.w	8000eec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d005      	beq.n	8000c6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d130      	bne.n	8000cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	f003 0201 	and.w	r2, r3, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d017      	beq.n	8000d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0203 	and.w	r2, r3, #3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80a6 	beq.w	8000eec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f10 <HAL_GPIO_Init+0x2e4>)
 8000da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da4:	4a5a      	ldr	r2, [pc, #360]	@ (8000f10 <HAL_GPIO_Init+0x2e4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dac:	4b58      	ldr	r3, [pc, #352]	@ (8000f10 <HAL_GPIO_Init+0x2e4>)
 8000dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db8:	4a56      	ldr	r2, [pc, #344]	@ (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000de2:	d01f      	beq.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a4c      	ldr	r2, [pc, #304]	@ (8000f18 <HAL_GPIO_Init+0x2ec>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d019      	beq.n	8000e20 <HAL_GPIO_Init+0x1f4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4b      	ldr	r2, [pc, #300]	@ (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d013      	beq.n	8000e1c <HAL_GPIO_Init+0x1f0>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a4a      	ldr	r2, [pc, #296]	@ (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00d      	beq.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <HAL_GPIO_Init+0x2f8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0x1e8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a48      	ldr	r2, [pc, #288]	@ (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d101      	bne.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e00a      	b.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e10:	2306      	movs	r3, #6
 8000e12:	e008      	b.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e14:	2304      	movs	r3, #4
 8000e16:	e006      	b.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e004      	b.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e002      	b.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e24:	2300      	movs	r3, #0
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	f002 0203 	and.w	r2, r2, #3
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	4093      	lsls	r3, r2
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e36:	4937      	ldr	r1, [pc, #220]	@ (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e44:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e68:	4a30      	ldr	r2, [pc, #192]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e92:	4a26      	ldr	r2, [pc, #152]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ee6:	4a11      	ldr	r2, [pc, #68]	@ (8000f2c <HAL_GPIO_Init+0x300>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f47f ae9d 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	48000c00 	.word	0x48000c00
 8000f24:	48001000 	.word	0x48001000
 8000f28:	48001400 	.word	0x48001400
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43d9      	mvns	r1, r3
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	400b      	ands	r3, r1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f806 	bl	8000fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0be      	b.n	800116c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d02e      	beq.n	8001098 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <HAL_HRTIM_Init+0x198>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d10b      	bne.n	800105c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001044:	4b4c      	ldr	r3, [pc, #304]	@ (8001178 <HAL_HRTIM_Init+0x19c>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001048:	4a4b      	ldr	r2, [pc, #300]	@ (8001178 <HAL_HRTIM_Init+0x19c>)
 800104a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800104e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001050:	4b49      	ldr	r3, [pc, #292]	@ (8001178 <HAL_HRTIM_Init+0x19c>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001054:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800106a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001080:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff fb1b 	bl	80006d4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d012      	beq.n	80010d0 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010b8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	e03e      	b.n	8001164 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80010e6:	7dfa      	ldrb	r2, [r7, #23]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	3318      	adds	r3, #24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80010fa:	7dfa      	ldrb	r2, [r7, #23]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	331c      	adds	r3, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3320      	adds	r3, #32
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001122:	7dfa      	ldrb	r2, [r7, #23]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3324      	adds	r3, #36	@ 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001136:	7dfa      	ldrb	r2, [r7, #23]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	3328      	adds	r3, #40	@ 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800114a:	7dfa      	ldrb	r2, [r7, #23]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	3330      	adds	r3, #48	@ 0x30
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	3301      	adds	r3, #1
 8001162:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d9bd      	bls.n	80010e6 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40016800 	.word	0x40016800
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8001190:	2302      	movs	r3, #2
 8001192:	e045      	b.n	8001220 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011aa:	d114      	bne.n	80011d6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0202 	bic.w	r2, r2, #2
 80011bc:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 80011d4:	e01f      	b.n	8001216 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0202 	orr.w	r2, r2, #2
 80011e6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 80011f2:	f023 010c 	bic.w	r1, r3, #12
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8001236:	f7ff fbbb 	bl	80009b0 <HAL_GetTick>
 800123a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800123c:	e014      	b.n	8001268 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d010      	beq.n	8001268 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001246:	f7ff fbb3 	bl	80009b0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d302      	bcc.n	800125c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2207      	movs	r2, #7
 8001260:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e011      	b.n	800128c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8001270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001278:	d1e1      	bne.n	800123e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d101      	bne.n	80012b0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80012ac:	2302      	movs	r3, #2
 80012ae:	e015      	b.n	80012dc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d104      	bne.n	80012c8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 fac6 	bl	8001852 <HRTIM_MasterBase_Config>
 80012c6:	e004      	b.n	80012d2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 faef 	bl	80018b0 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d101      	bne.n	8001300 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 80012fc:	2302      	movs	r3, #2
 80012fe:	e07a      	b.n	80013f6 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800130a:	2302      	movs	r3, #2
 800130c:	e073      	b.n	80013f6 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2202      	movs	r2, #2
 800131a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b06      	cmp	r3, #6
 8001322:	d104      	bne.n	800132e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fb02 	bl	8001930 <HRTIM_MasterWaveform_Config>
 800132c:	e004      	b.n	8001338 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fb9a 	bl	8001a6c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4403      	add	r3, r0
 800134a:	3320      	adds	r3, #32
 800134c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4403      	add	r3, r0
 8001360:	3324      	adds	r3, #36	@ 0x24
 8001362:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6899      	ldr	r1, [r3, #8]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4403      	add	r3, r0
 8001376:	3328      	adds	r3, #40	@ 0x28
 8001378:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68d9      	ldr	r1, [r3, #12]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4403      	add	r3, r0
 800138c:	332c      	adds	r3, #44	@ 0x2c
 800138e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6919      	ldr	r1, [r3, #16]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4403      	add	r3, r0
 80013a2:	3330      	adds	r3, #48	@ 0x30
 80013a4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 fe2d 	bl	8002008 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d017      	beq.n	80013e4 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d113      	bne.n	80013e4 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	01db      	lsls	r3, r3, #7
 80013c6:	4413      	add	r3, r2
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	6809      	ldr	r1, [r1, #0]
 80013d8:	431a      	orrs	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	440b      	add	r3, r1
 80013e2:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d101      	bne.n	800141a <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8001416:	2302      	movs	r3, #2
 8001418:	e020      	b.n	800145c <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8001424:	2302      	movs	r3, #2
 8001426:	e019      	b.n	800145c <HAL_HRTIM_WaveformTimerControl+0x5e>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 fc9b 	bl	8001d78 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fddf 	bl	8002008 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d101      	bne.n	8001482 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 800147e:	2302      	movs	r3, #2
 8001480:	e157      	b.n	8001732 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800148c:	2302      	movs	r3, #2
 800148e:	e150      	b.n	8001732 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d140      	bne.n	8001528 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	2b07      	cmp	r3, #7
 80014ac:	d82a      	bhi.n	8001504 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014d5 	.word	0x080014d5
 80014b8:	080014e1 	.word	0x080014e1
 80014bc:	08001505 	.word	0x08001505
 80014c0:	080014ed 	.word	0x080014ed
 80014c4:	08001505 	.word	0x08001505
 80014c8:	08001505 	.word	0x08001505
 80014cc:	08001505 	.word	0x08001505
 80014d0:	080014f9 	.word	0x080014f9
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	61da      	str	r2, [r3, #28]
        break;
 80014de:	e01a      	b.n	8001516 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 80014ea:	e014      	b.n	8001516 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80014f6:	e00e      	b.n	8001516 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8001502:	e008      	b.n	8001516 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2207      	movs	r2, #7
 8001508:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8001514:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b07      	cmp	r3, #7
 8001520:	f040 80fe 	bne.w	8001720 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e104      	b.n	8001732 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	2b07      	cmp	r3, #7
 800152e:	f200 80e3 	bhi.w	80016f8 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8001532:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001559 	.word	0x08001559
 800153c:	0800156d 	.word	0x0800156d
 8001540:	080016f9 	.word	0x080016f9
 8001544:	08001629 	.word	0x08001629
 8001548:	080016f9 	.word	0x080016f9
 800154c:	080016f9 	.word	0x080016f9
 8001550:	080016f9 	.word	0x080016f9
 8001554:	0800163d 	.word	0x0800163d
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6819      	ldr	r1, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	01db      	lsls	r3, r3, #7
 8001564:	440b      	add	r3, r1
 8001566:	339c      	adds	r3, #156	@ 0x9c
 8001568:	601a      	str	r2, [r3, #0]
        break;
 800156a:	e0d1      	b.n	8001710 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	440b      	add	r3, r1
 800157a:	33a4      	adds	r3, #164	@ 0xa4
 800157c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d03f      	beq.n	8001606 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	6811      	ldr	r1, [r2, #0]
 8001598:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3301      	adds	r3, #1
 80015a0:	01db      	lsls	r3, r3, #7
 80015a2:	440b      	add	r3, r1
 80015a4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	4413      	add	r3, r2
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	01db      	lsls	r3, r3, #7
 80015c4:	440b      	add	r3, r1
 80015c6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015d0:	d109      	bne.n	80015e6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	01db      	lsls	r3, r3, #7
 80015de:	440b      	add	r3, r1
 80015e0:	339c      	adds	r3, #156	@ 0x9c
 80015e2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 80015e4:	e091      	b.n	800170a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80015ee:	f040 808c 	bne.w	800170a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	01db      	lsls	r3, r3, #7
 80015fe:	440b      	add	r3, r1
 8001600:	33a8      	adds	r3, #168	@ 0xa8
 8001602:	601a      	str	r2, [r3, #0]
        break;
 8001604:	e081      	b.n	800170a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	01db      	lsls	r3, r3, #7
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6811      	ldr	r1, [r2, #0]
 8001618:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3301      	adds	r3, #1
 8001620:	01db      	lsls	r3, r3, #7
 8001622:	440b      	add	r3, r1
 8001624:	601a      	str	r2, [r3, #0]
        break;
 8001626:	e070      	b.n	800170a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	440b      	add	r3, r1
 8001636:	33a8      	adds	r3, #168	@ 0xa8
 8001638:	601a      	str	r2, [r3, #0]
        break;
 800163a:	e069      	b.n	8001710 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	01db      	lsls	r3, r3, #7
 8001648:	440b      	add	r3, r1
 800164a:	33ac      	adds	r3, #172	@ 0xac
 800164c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d03f      	beq.n	80016d6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	4413      	add	r3, r2
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6811      	ldr	r1, [r2, #0]
 8001668:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3301      	adds	r3, #1
 8001670:	01db      	lsls	r3, r3, #7
 8001672:	440b      	add	r3, r1
 8001674:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	01db      	lsls	r3, r3, #7
 8001680:	4413      	add	r3, r2
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	6809      	ldr	r1, [r1, #0]
 800168e:	431a      	orrs	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3301      	adds	r3, #1
 8001694:	01db      	lsls	r3, r3, #7
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016a2:	d109      	bne.n	80016b8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	440b      	add	r3, r1
 80016b2:	339c      	adds	r3, #156	@ 0x9c
 80016b4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 80016b6:	e02a      	b.n	800170e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80016c0:	d125      	bne.n	800170e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	01db      	lsls	r3, r3, #7
 80016ce:	440b      	add	r3, r1
 80016d0:	33a8      	adds	r3, #168	@ 0xa8
 80016d2:	601a      	str	r2, [r3, #0]
        break;
 80016d4:	e01b      	b.n	800170e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3301      	adds	r3, #1
 80016de:	01db      	lsls	r3, r3, #7
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6811      	ldr	r1, [r2, #0]
 80016e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	01db      	lsls	r3, r3, #7
 80016f2:	440b      	add	r3, r1
 80016f4:	601a      	str	r2, [r3, #0]
        break;
 80016f6:	e00a      	b.n	800170e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2207      	movs	r2, #7
 80016fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8001708:	e002      	b.n	8001710 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 800170a:	bf00      	nop
 800170c:	e000      	b.n	8001710 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 800170e:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b07      	cmp	r3, #7
 800171a:	d101      	bne.n	8001720 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e008      	b.n	8001732 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d101      	bne.n	800175e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 800175a:	2302      	movs	r3, #2
 800175c:	e01d      	b.n	800179a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8001768:	2302      	movs	r3, #2
 800176a:	e016      	b.n	800179a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 fb58 	bl	8001e38 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_HRTIM_WaveformOutputStart+0x18>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e01a      	b.n	80017f0 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_HRTIM_WaveformCountStart+0x18>
 8001810:	2302      	movs	r3, #2
 8001812:	e018      	b.n	8001846 <HAL_HRTIM_WaveformCountStart+0x4a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f023 0307 	bic.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f023 0318 	bic.w	r3, r3, #24
 800187c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	619a      	str	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	3301      	adds	r3, #1
 80018c4:	01db      	lsls	r3, r3, #7
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f023 0307 	bic.w	r3, r3, #7
 80018d2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f023 0318 	bic.w	r3, r3, #24
 80018e4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	01db      	lsls	r3, r3, #7
 80018fa:	4413      	add	r3, r2
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	440b      	add	r3, r1
 800190e:	3394      	adds	r3, #148	@ 0x94
 8001910:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	01db      	lsls	r3, r3, #7
 800191e:	440b      	add	r3, r1
 8001920:	3398      	adds	r3, #152	@ 0x98
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800194a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 0320 	bic.w	r3, r3, #32
 8001952:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001964:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b20      	cmp	r3, #32
 800196c:	d003      	beq.n	8001976 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d108      	bne.n	8001988 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800197c:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e021      	b.n	80019cc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d108      	bne.n	80019a2 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001996:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e014      	b.n	80019cc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d108      	bne.n	80019bc <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b0:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e007      	b.n	80019cc <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 0320 	bic.w	r3, r3, #32
 80019c2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80019ca:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80019d2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019e4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80019f6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001a08:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8001a1a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001a2e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a40:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	@ 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	01db      	lsls	r3, r3, #7
 8001a82:	4413      	add	r3, r2
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	01db      	lsls	r3, r3, #7
 8001a94:	440b      	add	r3, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	01db      	lsls	r3, r3, #7
 8001aa2:	4413      	add	r3, r2
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	4413      	add	r3, r2
 8001ab2:	33e8      	adds	r3, #232	@ 0xe8
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	01db      	lsls	r3, r3, #7
 8001ac0:	4413      	add	r3, r2
 8001ac2:	33e4      	adds	r3, #228	@ 0xe4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8001ad0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	f023 0320 	bic.w	r3, r3, #32
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d003      	beq.n	8001af4 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d108      	bne.n	8001b06 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b04:	e021      	b.n	8001b4a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d108      	bne.n	8001b20 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b1e:	e014      	b.n	8001b4a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d108      	bne.n	8001b3a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b38:	e007      	b.n	8001b4a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	f023 0320 	bic.w	r3, r3, #32
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bb4:	d103      	bne.n	8001bbe <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bde:	4313      	orrs	r3, r2
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfe:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c14:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c26:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c36:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8001c3a:	d004      	beq.n	8001c46 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c40:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8001c44:	d103      	bne.n	8001c4e <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	2b40      	cmp	r3, #64	@ 0x40
 8001c4c:	d108      	bne.n	8001c60 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8001c54:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5a:	6a3a      	ldr	r2, [r7, #32]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c66:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c76:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d850      	bhi.n	8001d20 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8001c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c84 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cb3 	.word	0x08001cb3
 8001c8c:	08001cc9 	.word	0x08001cc9
 8001c90:	08001cdf 	.word	0x08001cdf
 8001c94:	08001cf5 	.word	0x08001cf5
 8001c98:	08001d0b 	.word	0x08001d0b
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001ca2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61fb      	str	r3, [r7, #28]
      break;
 8001cb0:	e037      	b.n	8001d22 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61fb      	str	r3, [r7, #28]
      break;
 8001cc6:	e02c      	b.n	8001d22 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001cce:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
      break;
 8001cdc:	e021      	b.n	8001d22 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ce4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]
      break;
 8001cf2:	e016      	b.n	8001d22 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cfa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61fb      	str	r3, [r7, #28]
      break;
 8001d08:	e00b      	b.n	8001d22 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d10:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	019b      	lsls	r3, r3, #6
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61fb      	str	r3, [r7, #28]
      break;
 8001d1e:	e000      	b.n	8001d22 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8001d20:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	01db      	lsls	r3, r3, #7
 8001d2c:	4413      	add	r3, r2
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d30:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	01db      	lsls	r3, r3, #7
 8001d3a:	4413      	add	r3, r2
 8001d3c:	33e8      	adds	r3, #232	@ 0xe8
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	01db      	lsls	r3, r3, #7
 8001d4a:	4413      	add	r3, r2
 8001d4c:	33e4      	adds	r3, #228	@ 0xe4
 8001d4e:	6a3a      	ldr	r2, [r7, #32]
 8001d50:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	4413      	add	r3, r2
 8001d5c:	33d4      	adds	r3, #212	@ 0xd4
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8001d6c:	bf00      	nop
 8001d6e:	372c      	adds	r7, #44	@ 0x2c
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	01db      	lsls	r3, r3, #7
 8001d8c:	4413      	add	r3, r2
 8001d8e:	33ec      	adds	r3, #236	@ 0xec
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f023 0310 	bic.w	r3, r3, #16
 8001d9a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001dae:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc0:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001dd2:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d11a      	bne.n	8001e1c <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f023 0302 	bic.w	r3, r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	4413      	add	r3, r2
 8001e26:	33ec      	adds	r3, #236	@ 0xec
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]

}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	01db      	lsls	r3, r3, #7
 8001e52:	4413      	add	r3, r2
 8001e54:	33e4      	adds	r3, #228	@ 0xe4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	01db      	lsls	r3, r3, #7
 8001e62:	4413      	add	r3, r2
 8001e64:	33b8      	adds	r3, #184	@ 0xb8
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	617b      	str	r3, [r7, #20]

  switch (Output)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e70:	d05d      	beq.n	8001f2e <HRTIM_OutputConfig+0xf6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e78:	d86e      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e80:	d042      	beq.n	8001f08 <HRTIM_OutputConfig+0xd0>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e88:	d866      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e90:	d04d      	beq.n	8001f2e <HRTIM_OutputConfig+0xf6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e98:	d85e      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea0:	d032      	beq.n	8001f08 <HRTIM_OutputConfig+0xd0>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea8:	d856      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	@ 0x80
 8001eae:	d03e      	beq.n	8001f2e <HRTIM_OutputConfig+0xf6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b80      	cmp	r3, #128	@ 0x80
 8001eb4:	d850      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b40      	cmp	r3, #64	@ 0x40
 8001eba:	d025      	beq.n	8001f08 <HRTIM_OutputConfig+0xd0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b40      	cmp	r3, #64	@ 0x40
 8001ec0:	d84a      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d01f      	beq.n	8001f08 <HRTIM_OutputConfig+0xd0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d044      	beq.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d841      	bhi.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d33e      	bcc.n	8001f58 <HRTIM_OutputConfig+0x120>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3b02      	subs	r3, #2
 8001ede:	2201      	movs	r2, #1
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	4b48      	ldr	r3, [pc, #288]	@ (8002004 <HRTIM_OutputConfig+0x1cc>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d11c      	bne.n	8001f2e <HRTIM_OutputConfig+0xf6>
 8001ef4:	f244 0304 	movw	r3, #16388	@ 0x4004
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d027      	beq.n	8001f58 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	01db      	lsls	r3, r3, #7
 8001f14:	440b      	add	r3, r1
 8001f16:	33bc      	adds	r3, #188	@ 0xbc
 8001f18:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	440b      	add	r3, r1
 8001f28:	33c0      	adds	r3, #192	@ 0xc0
 8001f2a:	601a      	str	r2, [r3, #0]
      break;
 8001f2c:	e015      	b.n	8001f5a <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	01db      	lsls	r3, r3, #7
 8001f3a:	440b      	add	r3, r1
 8001f3c:	33c4      	adds	r3, #196	@ 0xc4
 8001f3e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	440b      	add	r3, r1
 8001f4e:	33c8      	adds	r3, #200	@ 0xc8
 8001f50:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8001f52:	2310      	movs	r3, #16
 8001f54:	61bb      	str	r3, [r7, #24]
      break;
 8001f56:	e000      	b.n	8001f5a <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8001f58:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8001f5a:	22fe      	movs	r2, #254	@ 0xfe
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d111      	bne.n	8001fe6 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10c      	bne.n	8001fe6 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	01db      	lsls	r3, r3, #7
 8001fee:	4413      	add	r3, r2
 8001ff0:	33e4      	adds	r3, #228	@ 0xe4
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40000041 	.word	0x40000041

08002008 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d85e      	bhi.n	80020d6 <HRTIM_ForceRegistersUpdate+0xce>
 8002018:	a201      	add	r2, pc, #4	@ (adr r2, 8002020 <HRTIM_ForceRegistersUpdate+0x18>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002053 	.word	0x08002053
 8002024:	08002069 	.word	0x08002069
 8002028:	0800207f 	.word	0x0800207f
 800202c:	08002095 	.word	0x08002095
 8002030:	080020ab 	.word	0x080020ab
 8002034:	080020c1 	.word	0x080020c1
 8002038:	0800203d 	.word	0x0800203d
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002050:	e042      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0202 	orr.w	r2, r2, #2
 8002062:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002066:	e037      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0204 	orr.w	r2, r2, #4
 8002078:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800207c:	e02c      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8002092:	e021      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0210 	orr.w	r2, r2, #16
 80020a4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80020a8:	e016      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80020be:	e00b      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020d0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80020d4:	e000      	b.n	80020d8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 80020d6:	bf00      	nop
  }
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d141      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	d131      	bne.n	8002164 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002100:	4b47      	ldr	r3, [pc, #284]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002106:	4a46      	ldr	r2, [pc, #280]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800210c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002110:	4b43      	ldr	r3, [pc, #268]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002118:	4a41      	ldr	r2, [pc, #260]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002120:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2232      	movs	r2, #50	@ 0x32
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	4a3f      	ldr	r2, [pc, #252]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	0c9b      	lsrs	r3, r3, #18
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002136:	e002      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3b01      	subs	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214a:	d102      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f2      	bne.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002152:	4b33      	ldr	r3, [pc, #204]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215e:	d158      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e057      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002164:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800216a:	4a2d      	ldr	r2, [pc, #180]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002170:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002174:	e04d      	b.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800217c:	d141      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218a:	d131      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800218c:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002192:	4a23      	ldr	r2, [pc, #140]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002198:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2232      	movs	r2, #50	@ 0x32
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	0c9b      	lsrs	r3, r3, #18
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c2:	e002      	b.n	80021ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d6:	d102      	bne.n	80021de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f2      	bne.n	80021c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ea:	d112      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e011      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002200:	e007      	b.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002210:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40007000 	.word	0x40007000
 8002224:	20000008 	.word	0x20000008
 8002228:	431bde83 	.word	0x431bde83

0800222c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002236:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223a:	6093      	str	r3, [r2, #8]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40007000 	.word	0x40007000

0800224c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e2fe      	b.n	800285c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d075      	beq.n	8002356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226a:	4b97      	ldr	r3, [pc, #604]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002274:	4b94      	ldr	r3, [pc, #592]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0x3e>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d002      	beq.n	8002290 <HAL_RCC_OscConfig+0x44>
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d10b      	bne.n	80022a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	4b8d      	ldr	r3, [pc, #564]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d05b      	beq.n	8002354 <HAL_RCC_OscConfig+0x108>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d157      	bne.n	8002354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e2d9      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b0:	d106      	bne.n	80022c0 <HAL_RCC_OscConfig+0x74>
 80022b2:	4b85      	ldr	r3, [pc, #532]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a84      	ldr	r2, [pc, #528]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xb0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x98>
 80022ca:	4b7f      	ldr	r3, [pc, #508]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7e      	ldr	r2, [pc, #504]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b7c      	ldr	r3, [pc, #496]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7b      	ldr	r2, [pc, #492]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xb0>
 80022e4:	4b78      	ldr	r3, [pc, #480]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a77      	ldr	r2, [pc, #476]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b75      	ldr	r3, [pc, #468]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a74      	ldr	r2, [pc, #464]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fb54 	bl	80009b0 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fb50 	bl	80009b0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e29e      	b.n	800285c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	4b6a      	ldr	r3, [pc, #424]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xc0>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fb40 	bl	80009b0 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fb3c 	bl	80009b0 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e28a      	b.n	800285c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002346:	4b60      	ldr	r3, [pc, #384]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0xe8>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d075      	beq.n	800244e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002362:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236c:	4b56      	ldr	r3, [pc, #344]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d102      	bne.n	8002382 <HAL_RCC_OscConfig+0x136>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d002      	beq.n	8002388 <HAL_RCC_OscConfig+0x13c>
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11f      	bne.n	80023c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002388:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_OscConfig+0x154>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e25d      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b49      	ldr	r3, [pc, #292]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	4946      	ldr	r1, [pc, #280]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023b4:	4b45      	ldr	r3, [pc, #276]	@ (80024cc <HAL_RCC_OscConfig+0x280>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe faad 	bl	8000918 <HAL_InitTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d043      	beq.n	800244c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e249      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d0:	4b3d      	ldr	r3, [pc, #244]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3c      	ldr	r2, [pc, #240]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fae8 	bl	80009b0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe fae4 	bl	80009b0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e232      	b.n	800285c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f6:	4b34      	ldr	r3, [pc, #208]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	492d      	ldr	r1, [pc, #180]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
 8002416:	e01a      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002418:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800241e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fac4 	bl	80009b0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7fe fac0 	bl	80009b0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e20e      	b.n	800285c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243e:	4b22      	ldr	r3, [pc, #136]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1e0>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d041      	beq.n	80024de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01c      	beq.n	800249c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fe fa9d 	bl	80009b0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247a:	f7fe fa99 	bl	80009b0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1e7      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ef      	beq.n	800247a <HAL_RCC_OscConfig+0x22e>
 800249a:	e020      	b.n	80024de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fa80 	bl	80009b0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b2:	e00d      	b.n	80024d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fa7c 	bl	80009b0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d906      	bls.n	80024d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1ca      	b.n	800285c <HAL_RCC_OscConfig+0x610>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ea      	bne.n	80024b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80a6 	beq.w	8002638 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f0:	4b84      	ldr	r3, [pc, #528]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_OscConfig+0x2b4>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x2b6>
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b7f      	ldr	r3, [pc, #508]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	4a7e      	ldr	r2, [pc, #504]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002510:	6593      	str	r3, [r2, #88]	@ 0x58
 8002512:	4b7c      	ldr	r3, [pc, #496]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002522:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <HAL_RCC_OscConfig+0x4bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252e:	4b76      	ldr	r3, [pc, #472]	@ (8002708 <HAL_RCC_OscConfig+0x4bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	@ (8002708 <HAL_RCC_OscConfig+0x4bc>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7fe fa39 	bl	80009b0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe fa35 	bl	80009b0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e183      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002554:	4b6c      	ldr	r3, [pc, #432]	@ (8002708 <HAL_RCC_OscConfig+0x4bc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d108      	bne.n	800257a <HAL_RCC_OscConfig+0x32e>
 8002568:	4b66      	ldr	r3, [pc, #408]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a65      	ldr	r2, [pc, #404]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002578:	e024      	b.n	80025c4 <HAL_RCC_OscConfig+0x378>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d110      	bne.n	80025a4 <HAL_RCC_OscConfig+0x358>
 8002582:	4b60      	ldr	r3, [pc, #384]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002588:	4a5e      	ldr	r2, [pc, #376]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002592:	4b5c      	ldr	r3, [pc, #368]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	4a5a      	ldr	r2, [pc, #360]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a2:	e00f      	b.n	80025c4 <HAL_RCC_OscConfig+0x378>
 80025a4:	4b57      	ldr	r3, [pc, #348]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	4a56      	ldr	r2, [pc, #344]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b4:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a52      	ldr	r2, [pc, #328]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d016      	beq.n	80025fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe f9f0 	bl	80009b0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe f9ec 	bl	80009b0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e138      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ed      	beq.n	80025d4 <HAL_RCC_OscConfig+0x388>
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe f9d9 	bl	80009b0 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe f9d5 	bl	80009b0 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e121      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ed      	bne.n	8002602 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b35      	ldr	r3, [pc, #212]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	4a34      	ldr	r2, [pc, #208]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002636:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d03c      	beq.n	80026be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01c      	beq.n	8002686 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002652:	4a2c      	ldr	r2, [pc, #176]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe f9a8 	bl	80009b0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002664:	f7fe f9a4 	bl	80009b0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0f2      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002676:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <HAL_RCC_OscConfig+0x418>
 8002684:	e01b      	b.n	80026be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002686:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800268c:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7fe f98b 	bl	80009b0 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800269e:	f7fe f987 	bl	80009b0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e0d5      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b0:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80026b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80c9 	beq.w	800285a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	f000 8083 	beq.w	80027dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d15e      	bne.n	800279c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <HAL_RCC_OscConfig+0x4b8>)
 80026e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe f961 	bl	80009b0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	e00c      	b.n	800270c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe f95d 	bl	80009b0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d905      	bls.n	800270c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0ab      	b.n	800285c <HAL_RCC_OscConfig+0x610>
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	4b55      	ldr	r3, [pc, #340]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ec      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	4b52      	ldr	r3, [pc, #328]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4b52      	ldr	r3, [pc, #328]	@ (8002868 <HAL_RCC_OscConfig+0x61c>)
 800271e:	4013      	ands	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6a11      	ldr	r1, [r2, #32]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002728:	3a01      	subs	r2, #1
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	4311      	orrs	r1, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002732:	0212      	lsls	r2, r2, #8
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0552      	lsls	r2, r2, #21
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002746:	0852      	lsrs	r2, r2, #1
 8002748:	3a01      	subs	r2, #1
 800274a:	0652      	lsls	r2, r2, #25
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002752:	06d2      	lsls	r2, r2, #27
 8002754:	430a      	orrs	r2, r1
 8002756:	4943      	ldr	r1, [pc, #268]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a40      	ldr	r2, [pc, #256]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002768:	4b3e      	ldr	r3, [pc, #248]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a3d      	ldr	r2, [pc, #244]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe f91c 	bl	80009b0 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe f918 	bl	80009b0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e066      	b.n	800285c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b35      	ldr	r3, [pc, #212]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x530>
 800279a:	e05e      	b.n	800285a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a30      	ldr	r2, [pc, #192]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 80027a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe f902 	bl	80009b0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe f8fe 	bl	80009b0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e04c      	b.n	800285c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c2:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027ce:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4924      	ldr	r1, [pc, #144]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 80027d4:	4b25      	ldr	r3, [pc, #148]	@ (800286c <HAL_RCC_OscConfig+0x620>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
 80027da:	e03e      	b.n	800285a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e039      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <HAL_RCC_OscConfig+0x618>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d12c      	bne.n	8002856 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	3b01      	subs	r3, #1
 8002808:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d123      	bne.n	8002856 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002818:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11b      	bne.n	8002856 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d113      	bne.n	8002856 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	3b01      	subs	r3, #1
 800283c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d109      	bne.n	8002856 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	019f800c 	.word	0x019f800c
 800286c:	feeefffc 	.word	0xfeeefffc

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e11e      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b91      	ldr	r3, [pc, #580]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d910      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	498c      	ldr	r1, [pc, #560]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e106      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d073      	beq.n	80029ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d129      	bne.n	8002920 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028cc:	4b81      	ldr	r3, [pc, #516]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0f4      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028dc:	f000 f966 	bl	8002bac <RCC_GetSysClockFreqFromPLLSource>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad8 <HAL_RCC_ClockConfig+0x268>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d93f      	bls.n	800296a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ea:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d033      	beq.n	800296a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	d12f      	bne.n	800296a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290a:	4b72      	ldr	r3, [pc, #456]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002912:	4a70      	ldr	r2, [pc, #448]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002918:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e024      	b.n	800296a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d107      	bne.n	8002938 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002928:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0c6      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002938:	4b66      	ldr	r3, [pc, #408]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0be      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002948:	f000 f8ce 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 800294c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4a61      	ldr	r2, [pc, #388]	@ (8002ad8 <HAL_RCC_ClockConfig+0x268>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d909      	bls.n	800296a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002956:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800295e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002964:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4957      	ldr	r1, [pc, #348]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f7fe f818 	bl	80009b0 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7fe f814 	bl	80009b0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e095      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b43      	ldr	r3, [pc, #268]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a42      	ldr	r2, [pc, #264]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029dc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029e4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4936      	ldr	r1, [pc, #216]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b80      	cmp	r3, #128	@ 0x80
 8002a04:	d105      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a06:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4a32      	ldr	r2, [pc, #200]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d21d      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 020f 	bic.w	r2, r3, #15
 8002a28:	4929      	ldr	r1, [pc, #164]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a30:	f7fd ffbe 	bl	80009b0 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fd ffba 	bl	80009b0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e03b      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1ed      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4917      	ldr	r1, [pc, #92]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490f      	ldr	r1, [pc, #60]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a9a:	f000 f825 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490c      	ldr	r1, [pc, #48]	@ (8002adc <HAL_RCC_ClockConfig+0x26c>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x270>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_RCC_ClockConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd ff2a 	bl	8000918 <HAL_InitTick>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	04c4b400 	.word	0x04c4b400
 8002adc:	08002ca8 	.word	0x08002ca8
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002afa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e047      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e03e      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b12:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d136      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b46:	68d2      	ldr	r2, [r2, #12]
 8002b48:	0a12      	lsrs	r2, r2, #8
 8002b4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	617b      	str	r3, [r7, #20]
      break;
 8002b54:	e00c      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b56:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	0a12      	lsrs	r2, r2, #8
 8002b64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
      break;
 8002b6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0e5b      	lsrs	r3, r3, #25
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e001      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b90:	693b      	ldr	r3, [r7, #16]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	016e3600 	.word	0x016e3600

08002bac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d10c      	bne.n	8002bea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4a14      	ldr	r2, [pc, #80]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	0a12      	lsrs	r2, r2, #8
 8002bde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
    break;
 8002be8:	e00c      	b.n	8002c04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	0a12      	lsrs	r2, r2, #8
 8002bf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    break;
 8002c02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0e5b      	lsrs	r3, r3, #25
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	016e3600 	.word	0x016e3600
 8002c34:	00f42400 	.word	0x00f42400

08002c38 <memset>:
 8002c38:	4402      	add	r2, r0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <memset+0xa>
 8002c40:	4770      	bx	lr
 8002c42:	f803 1b01 	strb.w	r1, [r3], #1
 8002c46:	e7f9      	b.n	8002c3c <memset+0x4>

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8002c80 <__libc_init_array+0x38>)
 8002c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8002c84 <__libc_init_array+0x3c>)
 8002c4e:	1b64      	subs	r4, r4, r5
 8002c50:	10a4      	asrs	r4, r4, #2
 8002c52:	2600      	movs	r6, #0
 8002c54:	42a6      	cmp	r6, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	4d0b      	ldr	r5, [pc, #44]	@ (8002c88 <__libc_init_array+0x40>)
 8002c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8002c8c <__libc_init_array+0x44>)
 8002c5c:	f000 f818 	bl	8002c90 <_init>
 8002c60:	1b64      	subs	r4, r4, r5
 8002c62:	10a4      	asrs	r4, r4, #2
 8002c64:	2600      	movs	r6, #0
 8002c66:	42a6      	cmp	r6, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c70:	4798      	blx	r3
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7a:	4798      	blx	r3
 8002c7c:	3601      	adds	r6, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002cb8 	.word	0x08002cb8
 8002c84:	08002cb8 	.word	0x08002cb8
 8002c88:	08002cb8 	.word	0x08002cb8
 8002c8c:	08002cbc 	.word	0x08002cbc

08002c90 <_init>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr

08002c9c <_fini>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr
