
HRTIM_Basic_Multiple_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002700  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080028d8  080028d8  000038d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  00004004  2**0
                  CONTENTS
  4 .ARM          00000000  08002994  08002994  00004004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002994  08002994  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002998  08002998  00003998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800299c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080029a0  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080029a0  00004020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000415d  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000008a  00000000  00000000  00008191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00005c51  00000000  00000000  0000821b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000c02  00000000  00000000  0000de6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000538  00000000  00000000  0000ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000bb3f3  00000000  00000000  0000efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000003e1  00000000  00000000  000ca39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001eef8  00000000  00000000  000ca77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9674  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001594  00000000  00000000  000e96b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080028c0 	.word	0x080028c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	080028c0 	.word	0x080028c0

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480d      	ldr	r0, [pc, #52]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490e      	ldr	r1, [pc, #56]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0b      	ldr	r2, [pc, #44]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0b      	ldr	r4, [pc, #44]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000242:	f001 fec3 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f002 fb17 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f001 fb1d 	bl	8001888 <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800025c:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8000260:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000264:	20000020 	.word	0x20000020

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f003 0307 	and.w	r3, r3, #7
 800027a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800027c:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <__NVIC_SetPriorityGrouping+0x44>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800029c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029e:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <__NVIC_SetPriorityGrouping+0x44>)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	60d3      	str	r3, [r2, #12]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__NVIC_GetPriorityGrouping+0x18>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	0a1b      	lsrs	r3, r3, #8
 80002be:	f003 0307 	and.w	r3, r3, #7
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db0b      	blt.n	80002fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f003 021f 	and.w	r2, r3, #31
 80002e8:	4907      	ldr	r1, [pc, #28]	@ (8000308 <__NVIC_EnableIRQ+0x38>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	095b      	lsrs	r3, r3, #5
 80002f0:	2001      	movs	r0, #1
 80002f2:	fa00 f202 	lsl.w	r2, r0, r2
 80002f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e100 	.word	0xe000e100

0800030c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	6039      	str	r1, [r7, #0]
 8000316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db0a      	blt.n	8000336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	490c      	ldr	r1, [pc, #48]	@ (8000358 <__NVIC_SetPriority+0x4c>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	0112      	lsls	r2, r2, #4
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	440b      	add	r3, r1
 8000330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000334:	e00a      	b.n	800034c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4908      	ldr	r1, [pc, #32]	@ (800035c <__NVIC_SetPriority+0x50>)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	3b04      	subs	r3, #4
 8000344:	0112      	lsls	r2, r2, #4
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	440b      	add	r3, r1
 800034a:	761a      	strb	r2, [r3, #24]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	@ 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f003 0307 	and.w	r3, r3, #7
 8000372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	f1c3 0307 	rsb	r3, r3, #7
 800037a:	2b04      	cmp	r3, #4
 800037c:	bf28      	it	cs
 800037e:	2304      	movcs	r3, #4
 8000380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	3304      	adds	r3, #4
 8000386:	2b06      	cmp	r3, #6
 8000388:	d902      	bls.n	8000390 <NVIC_EncodePriority+0x30>
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3b03      	subs	r3, #3
 800038e:	e000      	b.n	8000392 <NVIC_EncodePriority+0x32>
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	f04f 32ff 	mov.w	r2, #4294967295
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	43da      	mvns	r2, r3
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	401a      	ands	r2, r3
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43d9      	mvns	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	4313      	orrs	r3, r2
         );
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3724      	adds	r7, #36	@ 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_HRTIM_ForceUpdate>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_ForceUpdate(HRTIM_TypeDef *HRTIMx, uint32_t Timers)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	6039      	str	r1, [r7, #0]
  SET_BIT(HRTIMx->sCommonRegs.CR2, ((Timers >> HRTIM_MCR_MCEN_Pos) & HRTIM_CR2_SWUPD_MASK));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	0c1b      	lsrs	r3, r3, #16
 80003da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003de:	431a      	orrs	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <LL_HRTIM_EnableOutput>:
  *         @arg @ref LL_HRTIM_OUTPUT_TF1
  *         @arg @ref LL_HRTIM_OUTPUT_TF2
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_EnableOutput(HRTIM_TypeDef *HRTIMx, uint32_t Outputs)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
 80003fa:	6039      	str	r1, [r7, #0]
  SET_BIT(HRTIMx->sCommonRegs.OENR, (Outputs & HRTIM_OENR_OEN_MASK));
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000408:	431a      	orrs	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <LL_HRTIM_ConfigDLLCalibration>:
  *         @arg @ref LL_HRTIM_DLLCALIBRATION_RATE_2
  *         @arg @ref LL_HRTIM_DLLCALIBRATION_RATE_3
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_ConfigDLLCalibration(HRTIM_TypeDef *HRTIMx, uint32_t Mode, uint32_t Period)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(HRTIMx->sCommonRegs.DLLCR, (HRTIM_DLLCR_CALEN | HRTIM_DLLCR_CALRTE), (Mode | Period));
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800042e:	f023 020e 	bic.w	r2, r3, #14
 8000432:	68b9      	ldr	r1, [r7, #8]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	430b      	orrs	r3, r1
 8000438:	431a      	orrs	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <LL_HRTIM_TIM_CounterEnable>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_CounterEnable(HRTIM_TypeDef *HRTIMx, uint32_t Timers)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  SET_BIT(HRTIMx->sMasterRegs.MCR, Timers);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	431a      	orrs	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
	...

08000470 <LL_HRTIM_TIM_SetPrescaler>:
  *         @arg @ref LL_HRTIM_PRESCALERRATIO_DIV2
  *         @arg @ref LL_HRTIM_PRESCALERRATIO_DIV4
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetPrescaler(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Prescaler)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	@ 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa93 f3a3 	rbit	r3, r3
 8000486:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <LL_HRTIM_TIM_SetPrescaler+0x26>
  {
    return 32U;
 8000492:	2320      	movs	r3, #32
 8000494:	e003      	b.n	800049e <LL_HRTIM_TIM_SetPrescaler+0x2e>
  }
  return __builtin_clz(value);
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	fab3 f383 	clz	r3, r3
 800049c:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800049e:	3b10      	subs	r3, #16
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4619      	mov	r1, r3
 80004a8:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <LL_HRTIM_TIM_SetPrescaler+0x60>)
 80004aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b0:	440b      	add	r3, r1
 80004b2:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, HRTIM_MCR_CK_PSC, Prescaler);
 80004b4:	6a3b      	ldr	r3, [r7, #32]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f023 0207 	bic.w	r2, r3, #7
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	431a      	orrs	r2, r3
 80004c0:	6a3b      	ldr	r3, [r7, #32]
 80004c2:	601a      	str	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	372c      	adds	r7, #44	@ 0x2c
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	080028d8 	.word	0x080028d8

080004d4 <LL_HRTIM_TIM_SetCounterMode>:
  *         @arg @ref LL_HRTIM_MODE_SINGLESHOT
  *         @arg @ref LL_HRTIM_MODE_RETRIGGERABLE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCounterMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Mode)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b08b      	sub	sp, #44	@ 0x2c
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	fa93 f3a3 	rbit	r3, r3
 80004ea:	617b      	str	r3, [r7, #20]
  return result;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80004f0:	69fb      	ldr	r3, [r7, #28]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d101      	bne.n	80004fa <LL_HRTIM_TIM_SetCounterMode+0x26>
    return 32U;
 80004f6:	2320      	movs	r3, #32
 80004f8:	e003      	b.n	8000502 <LL_HRTIM_TIM_SetCounterMode+0x2e>
  return __builtin_clz(value);
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	fab3 f383 	clz	r3, r3
 8000500:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000502:	3b10      	subs	r3, #16
 8000504:	b2db      	uxtb	r3, r3
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4619      	mov	r1, r3
 800050c:	4a09      	ldr	r2, [pc, #36]	@ (8000534 <LL_HRTIM_TIM_SetCounterMode+0x60>)
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000514:	440b      	add	r3, r1
 8000516:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, (HRTIM_TIMCR_RETRIG | HRTIM_MCR_CONT), Mode);
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f023 0218 	bic.w	r2, r3, #24
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	431a      	orrs	r2, r3
 8000524:	6a3b      	ldr	r3, [r7, #32]
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	372c      	adds	r7, #44	@ 0x2c
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	080028d8 	.word	0x080028d8

08000538 <LL_HRTIM_TIM_DisableHalfMode>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisableHalfMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	@ 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	fa93 f3a3 	rbit	r3, r3
 800054c:	60fb      	str	r3, [r7, #12]
  return result;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <LL_HRTIM_TIM_DisableHalfMode+0x24>
    return 32U;
 8000558:	2320      	movs	r3, #32
 800055a:	e003      	b.n	8000564 <LL_HRTIM_TIM_DisableHalfMode+0x2c>
  return __builtin_clz(value);
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	fab3 f383 	clz	r3, r3
 8000562:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000564:	3b10      	subs	r3, #16
 8000566:	b2db      	uxtb	r3, r3
 8000568:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4619      	mov	r1, r3
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <LL_HRTIM_TIM_DisableHalfMode+0x74>)
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	440b      	add	r3, r1
 8000578:	61bb      	str	r3, [r7, #24]
  CLEAR_BIT(*pReg, HRTIM_MCR_HALF);
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f023 0220 	bic.w	r2, r3, #32
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(*pReg, HRTIM_MCR_INTLVD << REG_SHIFT_TAB_INTLVD[iTimer]);
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4909      	ldr	r1, [pc, #36]	@ (80005b0 <LL_HRTIM_TIM_DisableHalfMode+0x78>)
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	440b      	add	r3, r1
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	23c0      	movs	r3, #192	@ 0xc0
 8000596:	408b      	lsls	r3, r1
 8000598:	43db      	mvns	r3, r3
 800059a:	401a      	ands	r2, r3
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	601a      	str	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	3724      	adds	r7, #36	@ 0x24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	080028d8 	.word	0x080028d8
 80005b0:	08002970 	.word	0x08002970

080005b4 <LL_HRTIM_TIM_DisableResyncUpdate>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisableResyncUpdate(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b089      	sub	sp, #36	@ 0x24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	fa93 f3a3 	rbit	r3, r3
 80005c8:	60fb      	str	r3, [r7, #12]
  return result;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <LL_HRTIM_TIM_DisableResyncUpdate+0x24>
    return 32U;
 80005d4:	2320      	movs	r3, #32
 80005d6:	e003      	b.n	80005e0 <LL_HRTIM_TIM_DisableResyncUpdate+0x2c>
  return __builtin_clz(value);
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	fab3 f383 	clz	r3, r3
 80005de:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80005e0:	3b11      	subs	r3, #17
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3380      	adds	r3, #128	@ 0x80
 80005ea:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 80005ec:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <LL_HRTIM_TIM_DisableResyncUpdate+0x5c>)
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 80005f4:	440b      	add	r3, r1
 80005f6:	61bb      	str	r3, [r7, #24]

  CLEAR_BIT(*pReg, HRTIM_TIMCR_RSYNCU);
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	601a      	str	r2, [r3, #0]
  /* This bit is significant only when UPDGAT[3:0] = 0000, it is ignored otherwise */
}
 8000604:	bf00      	nop
 8000606:	3724      	adds	r7, #36	@ 0x24
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	080028d8 	.word	0x080028d8

08000614 <LL_HRTIM_TIM_SetInterleavedMode>:
  *         @arg @ref LL_HRTIM_INTERLEAVED_MODE_TRIPLE
  *         @arg @ref LL_HRTIM_INTERLEAVED_MODE_QUAD
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetInterleavedMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Mode)
{
 8000614:	b490      	push	{r4, r7}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	fa93 f3a3 	rbit	r3, r3
 800062a:	617b      	str	r3, [r7, #20]
  return result;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <LL_HRTIM_TIM_SetInterleavedMode+0x26>
    return 32U;
 8000636:	2320      	movs	r3, #32
 8000638:	e003      	b.n	8000642 <LL_HRTIM_TIM_SetInterleavedMode+0x2e>
  return __builtin_clz(value);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	fab3 f383 	clz	r3, r3
 8000640:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000642:	3b10      	subs	r3, #16
 8000644:	b2db      	uxtb	r3, r3
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4619      	mov	r1, r3
 800064c:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <LL_HRTIM_TIM_SetInterleavedMode+0x7c>)
 800064e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000654:	440b      	add	r3, r1
 8000656:	623b      	str	r3, [r7, #32]

  MODIFY_REG(*pReg, REG_MASK_TAB_INTLVD[iTimer],
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LL_HRTIM_TIM_SetInterleavedMode+0x80>)
 800065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000660:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000664:	43db      	mvns	r3, r3
 8000666:	401a      	ands	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0120 	and.w	r1, r3, #32
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000674:	4c08      	ldr	r4, [pc, #32]	@ (8000698 <LL_HRTIM_TIM_SetInterleavedMode+0x84>)
 8000676:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000678:	4420      	add	r0, r4
 800067a:	7800      	ldrb	r0, [r0, #0]
 800067c:	4083      	lsls	r3, r0
 800067e:	430b      	orrs	r3, r1
 8000680:	431a      	orrs	r2, r3
 8000682:	6a3b      	ldr	r3, [r7, #32]
 8000684:	601a      	str	r2, [r3, #0]
             ((Mode & HRTIM_MCR_HALF) | ((Mode & HRTIM_MCR_INTLVD) << REG_SHIFT_TAB_INTLVD[iTimer])));
}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	@ 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bc90      	pop	{r4, r7}
 800068e:	4770      	bx	lr
 8000690:	080028d8 	.word	0x080028d8
 8000694:	08002978 	.word	0x08002978
 8000698:	08002970 	.word	0x08002970

0800069c <LL_HRTIM_TIM_DisableStartOnSync>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisableStartOnSync(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	@ 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	fa93 f3a3 	rbit	r3, r3
 80006b0:	60fb      	str	r3, [r7, #12]
  return result;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <LL_HRTIM_TIM_DisableStartOnSync+0x24>
    return 32U;
 80006bc:	2320      	movs	r3, #32
 80006be:	e003      	b.n	80006c8 <LL_HRTIM_TIM_DisableStartOnSync+0x2c>
  return __builtin_clz(value);
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80006c8:	3b10      	subs	r3, #16
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <LL_HRTIM_TIM_DisableStartOnSync+0x5c>)
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006da:	440b      	add	r3, r1
 80006dc:	61bb      	str	r3, [r7, #24]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCSTRTM);
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	3724      	adds	r7, #36	@ 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	080028d8 	.word	0x080028d8

080006fc <LL_HRTIM_TIM_DisableResetOnSync>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisableResetOnSync(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	fa93 f3a3 	rbit	r3, r3
 8000710:	60fb      	str	r3, [r7, #12]
  return result;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <LL_HRTIM_TIM_DisableResetOnSync+0x24>
    return 32U;
 800071c:	2320      	movs	r3, #32
 800071e:	e003      	b.n	8000728 <LL_HRTIM_TIM_DisableResetOnSync+0x2c>
  return __builtin_clz(value);
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fab3 f383 	clz	r3, r3
 8000726:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000728:	3b10      	subs	r3, #16
 800072a:	b2db      	uxtb	r3, r3
 800072c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4619      	mov	r1, r3
 8000732:	4a09      	ldr	r2, [pc, #36]	@ (8000758 <LL_HRTIM_TIM_DisableResetOnSync+0x5c>)
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073a:	440b      	add	r3, r1
 800073c:	61bb      	str	r3, [r7, #24]
  CLEAR_BIT(*pReg, HRTIM_MCR_SYNCRSTM);
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3724      	adds	r7, #36	@ 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	080028d8 	.word	0x080028d8

0800075c <LL_HRTIM_TIM_SetDACTrig>:
  *         @arg @ref LL_HRTIM_DACTRIG_DACTRIGOUT_2
  *         @arg @ref LL_HRTIM_DACTRIG_DACTRIGOUT_3
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetDACTrig(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t DACTrig)
{
 800075c:	b480      	push	{r7}
 800075e:	b08b      	sub	sp, #44	@ 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa93 f3a3 	rbit	r3, r3
 8000772:	617b      	str	r3, [r7, #20]
  return result;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <LL_HRTIM_TIM_SetDACTrig+0x26>
    return 32U;
 800077e:	2320      	movs	r3, #32
 8000780:	e003      	b.n	800078a <LL_HRTIM_TIM_SetDACTrig+0x2e>
  return __builtin_clz(value);
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	fab3 f383 	clz	r3, r3
 8000788:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800078a:	3b10      	subs	r3, #16
 800078c:	b2db      	uxtb	r3, r3
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4619      	mov	r1, r3
 8000794:	4a09      	ldr	r2, [pc, #36]	@ (80007bc <LL_HRTIM_TIM_SetDACTrig+0x60>)
 8000796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079c:	440b      	add	r3, r1
 800079e:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, HRTIM_MCR_DACSYNC, DACTrig);
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	431a      	orrs	r2, r3
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	372c      	adds	r7, #44	@ 0x2c
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	080028d8 	.word	0x080028d8

080007c0 <LL_HRTIM_TIM_DisablePreload>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisablePreload(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	fa93 f3a3 	rbit	r3, r3
 80007d4:	60fb      	str	r3, [r7, #12]
  return result;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <LL_HRTIM_TIM_DisablePreload+0x24>
    return 32U;
 80007e0:	2320      	movs	r3, #32
 80007e2:	e003      	b.n	80007ec <LL_HRTIM_TIM_DisablePreload+0x2c>
  return __builtin_clz(value);
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fab3 f383 	clz	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80007ec:	3b10      	subs	r3, #16
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <LL_HRTIM_TIM_DisablePreload+0x5c>)
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fe:	440b      	add	r3, r1
 8000800:	61bb      	str	r3, [r7, #24]
  CLEAR_BIT(*pReg, HRTIM_MCR_PREEN);
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	3724      	adds	r7, #36	@ 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	080028d8 	.word	0x080028d8

08000820 <LL_HRTIM_TIM_SetUpdateTrig>:
  *         @arg @ref LL_HRTIM_UPDATETRIG_REPETITION
  *         @arg @ref LL_HRTIM_UPDATETRIG_RESET
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetUpdateTrig(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t UpdateTrig)
{
 8000820:	b480      	push	{r7}
 8000822:	b08b      	sub	sp, #44	@ 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa93 f3a3 	rbit	r3, r3
 8000836:	617b      	str	r3, [r7, #20]
  return result;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <LL_HRTIM_TIM_SetUpdateTrig+0x26>
    return 32U;
 8000842:	2320      	movs	r3, #32
 8000844:	e003      	b.n	800084e <LL_HRTIM_TIM_SetUpdateTrig+0x2e>
  return __builtin_clz(value);
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fab3 f383 	clz	r3, r3
 800084c:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 800084e:	3b10      	subs	r3, #16
 8000850:	b2db      	uxtb	r3, r3
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4619      	mov	r1, r3
 8000858:	4a0e      	ldr	r2, [pc, #56]	@ (8000894 <LL_HRTIM_TIM_SetUpdateTrig+0x74>)
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000860:	440b      	add	r3, r1
 8000862:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATETRIG[iTimer], UpdateTrig << REG_SHIFT_TAB_UPDATETRIG[iTimer]);
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	490b      	ldr	r1, [pc, #44]	@ (8000898 <LL_HRTIM_TIM_SetUpdateTrig+0x78>)
 800086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000870:	43db      	mvns	r3, r3
 8000872:	401a      	ands	r2, r3
 8000874:	4909      	ldr	r1, [pc, #36]	@ (800089c <LL_HRTIM_TIM_SetUpdateTrig+0x7c>)
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	440b      	add	r3, r1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	408b      	lsls	r3, r1
 8000882:	431a      	orrs	r2, r3
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	bf00      	nop
 800088a:	372c      	adds	r7, #44	@ 0x2c
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	080028d8 	.word	0x080028d8
 8000898:	08002918 	.word	0x08002918
 800089c:	08002938 	.word	0x08002938

080008a0 <LL_HRTIM_TIM_SetUpdateGating>:
  *         @arg @ref LL_HRTIM_UPDATEGATING_UPDEN2_UPDATE
  *         @arg @ref LL_HRTIM_UPDATEGATING_UPDEN3_UPDATE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetUpdateGating(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t UpdateGating)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b08b      	sub	sp, #44	@ 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa93 f3a3 	rbit	r3, r3
 80008b6:	617b      	str	r3, [r7, #20]
  return result;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d101      	bne.n	80008c6 <LL_HRTIM_TIM_SetUpdateGating+0x26>
    return 32U;
 80008c2:	2320      	movs	r3, #32
 80008c4:	e003      	b.n	80008ce <LL_HRTIM_TIM_SetUpdateGating+0x2e>
  return __builtin_clz(value);
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	fab3 f383 	clz	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 80008ce:	3b10      	subs	r3, #16
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCR) + REG_OFFSET_TAB_TIMER[iTimer]));
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <LL_HRTIM_TIM_SetUpdateGating+0x74>)
 80008da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e0:	440b      	add	r3, r1
 80008e2:	623b      	str	r3, [r7, #32]
  MODIFY_REG(*pReg, REG_MASK_TAB_UPDATEGATING[iTimer], (UpdateGating << REG_SHIFT_TAB_UPDATEGATING[iTimer]));
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	490b      	ldr	r1, [pc, #44]	@ (8000918 <LL_HRTIM_TIM_SetUpdateGating+0x78>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	4909      	ldr	r1, [pc, #36]	@ (800091c <LL_HRTIM_TIM_SetUpdateGating+0x7c>)
 80008f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f8:	440b      	add	r3, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	408b      	lsls	r3, r1
 8000902:	431a      	orrs	r2, r3
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	372c      	adds	r7, #44	@ 0x2c
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	080028d8 	.word	0x080028d8
 8000918:	08002940 	.word	0x08002940
 800091c:	0800295c 	.word	0x0800295c

08000920 <LL_HRTIM_TIM_DisablePushPullMode>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisablePushPullMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	@ 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	fa93 f3a3 	rbit	r3, r3
 8000934:	60fb      	str	r3, [r7, #12]
  return result;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <LL_HRTIM_TIM_DisablePushPullMode+0x24>
    return 32U;
 8000940:	2320      	movs	r3, #32
 8000942:	e003      	b.n	800094c <LL_HRTIM_TIM_DisablePushPullMode+0x2c>
  return __builtin_clz(value);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 800094c:	3b11      	subs	r3, #17
 800094e:	b2db      	uxtb	r3, r3
 8000950:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3380      	adds	r3, #128	@ 0x80
 8000956:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000958:	4a08      	ldr	r2, [pc, #32]	@ (800097c <LL_HRTIM_TIM_DisablePushPullMode+0x5c>)
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 8000960:	440b      	add	r3, r1
 8000962:	61bb      	str	r3, [r7, #24]
  CLEAR_BIT(*pReg, HRTIM_TIMCR_PSHPLL);
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	3724      	adds	r7, #36	@ 0x24
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	080028d8 	.word	0x080028d8

08000980 <LL_HRTIM_TIM_SetCompareMode>:
  *         @arg @ref LL_HRTIM_COMPAREMODE_DELAY_CMP3
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCompareMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t CompareUnit,
                                                 uint32_t Mode)
{
 8000980:	b480      	push	{r7}
 8000982:	b091      	sub	sp, #68	@ 0x44
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa93 f3a3 	rbit	r3, r3
 8000998:	613b      	str	r3, [r7, #16]
  return result;
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <LL_HRTIM_TIM_SetCompareMode+0x28>
    return 32U;
 80009a4:	2320      	movs	r3, #32
 80009a6:	e003      	b.n	80009b0 <LL_HRTIM_TIM_SetCompareMode+0x30>
  return __builtin_clz(value);
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 80009b0:	3b11      	subs	r3, #17
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3380      	adds	r3, #128	@ 0x80
 80009ba:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 80009bc:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <LL_HRTIM_TIM_SetCompareMode+0xc4>)
 80009be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR) +
 80009c4:	440b      	add	r3, r1
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	fa93 f3a3 	rbit	r3, r3
 80009d2:	61fb      	str	r3, [r7, #28]
  return result;
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <LL_HRTIM_TIM_SetCompareMode+0x62>
    return 32U;
 80009de:	2220      	movs	r2, #32
 80009e0:	e003      	b.n	80009ea <LL_HRTIM_TIM_SetCompareMode+0x6a>
  return __builtin_clz(value);
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	fab3 f383 	clz	r3, r3
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009f2:	fa93 f3a3 	rbit	r3, r3
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80009f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80009fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <LL_HRTIM_TIM_SetCompareMode+0x86>
    return 32U;
 8000a02:	2320      	movs	r3, #32
 8000a04:	e003      	b.n	8000a0e <LL_HRTIM_TIM_SetCompareMode+0x8e>
  return __builtin_clz(value);
 8000a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a08:	fab3 f383 	clz	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
  uint32_t shift = (((uint32_t)POSITION_VAL(CompareUnit) - (uint32_t)POSITION_VAL(LL_HRTIM_COMPAREUNIT_2)) & 0x1FU);
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 031f 	and.w	r3, r3, #31
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(* pReg, (HRTIM_TIMCR_DELCMP2 << shift), (Mode << shift));
 8000a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	401a      	ands	r2, r3
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	431a      	orrs	r2, r3
 8000a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3744      	adds	r7, #68	@ 0x44
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	080028d8 	.word	0x080028d8

08000a48 <LL_HRTIM_TIM_SetPeriod>:
  *         @arg @ref LL_HRTIM_TIMER_F
  * @param  Period Value between 0 and 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetPeriod(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Period)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa93 f3a3 	rbit	r3, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  return result;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <LL_HRTIM_TIM_SetPeriod+0x26>
    return 32U;
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	e003      	b.n	8000a76 <LL_HRTIM_TIM_SetPeriod+0x2e>
  return __builtin_clz(value);
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	fab3 f383 	clz	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000a76:	3b10      	subs	r3, #16
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MPER) +
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3314      	adds	r3, #20
 8000a80:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LL_HRTIM_TIM_SetPeriod+0x64>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MPER) +
 8000a8a:	440b      	add	r3, r1
 8000a8c:	623b      	str	r3, [r7, #32]
  MODIFY_REG(* pReg, HRTIM_MPER_MPER, Period);
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	6a3b      	ldr	r3, [r7, #32]
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	372c      	adds	r7, #44	@ 0x2c
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	080028d8 	.word	0x080028d8

08000ab0 <LL_HRTIM_TIM_SetRepetition>:
  *         @arg @ref LL_HRTIM_TIMER_F
  * @param  Repetition Value between 0 and 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetRepetition(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Repetition)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b08b      	sub	sp, #44	@ 0x2c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  return result;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <LL_HRTIM_TIM_SetRepetition+0x26>
    return 32U;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	e003      	b.n	8000ade <LL_HRTIM_TIM_SetRepetition+0x2e>
  return __builtin_clz(value);
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000ade:	3b10      	subs	r3, #16
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MREP) +
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <LL_HRTIM_TIM_SetRepetition+0x64>)
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MREP) +
 8000af2:	440b      	add	r3, r1
 8000af4:	623b      	str	r3, [r7, #32]
  MODIFY_REG(* pReg, HRTIM_MREP_MREP, Repetition);
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	372c      	adds	r7, #44	@ 0x2c
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	080028d8 	.word	0x080028d8

08000b18 <LL_HRTIM_TIM_SetCompare1>:
  *         periods of the fHRTIM clock, that is 0x60 if CKPSC[2:0] = 0,
  *         0x30 if CKPSC[2:0] = 1, 0x18 if CKPSC[2:0] = 2,...
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCompare1(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t CompareValue)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	@ 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa93 f3a3 	rbit	r3, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  return result;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <LL_HRTIM_TIM_SetCompare1+0x26>
    return 32U;
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	e003      	b.n	8000b46 <LL_HRTIM_TIM_SetCompare1+0x2e>
  return __builtin_clz(value);
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	fab3 f383 	clz	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000b46:	3b10      	subs	r3, #16
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	331c      	adds	r3, #28
 8000b50:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LL_HRTIM_TIM_SetCompare1+0x64>)
 8000b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP1R) +
 8000b5a:	440b      	add	r3, r1
 8000b5c:	623b      	str	r3, [r7, #32]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP1R, CompareValue);
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	0c1b      	lsrs	r3, r3, #16
 8000b64:	041b      	lsls	r3, r3, #16
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	372c      	adds	r7, #44	@ 0x2c
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	080028d8 	.word	0x080028d8

08000b80 <LL_HRTIM_TIM_SetCompare2>:
  *         periods of the fHRTIM clock, that is 0x60 if CKPSC[2:0] = 0,
  *         0x30 if CKPSC[2:0] = 1, 0x18 if CKPSC[2:0] = 2,...
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCompare2(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t CompareValue)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b08b      	sub	sp, #44	@ 0x2c
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa93 f3a3 	rbit	r3, r3
 8000b96:	617b      	str	r3, [r7, #20]
  return result;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <LL_HRTIM_TIM_SetCompare2+0x26>
    return 32U;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	e003      	b.n	8000bae <LL_HRTIM_TIM_SetCompare2+0x2e>
  return __builtin_clz(value);
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000bae:	3b10      	subs	r3, #16
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3324      	adds	r3, #36	@ 0x24
 8000bb8:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LL_HRTIM_TIM_SetCompare2+0x64>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP2R) +
 8000bc2:	440b      	add	r3, r1
 8000bc4:	623b      	str	r3, [r7, #32]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP2R, CompareValue);
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	0c1b      	lsrs	r3, r3, #16
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	372c      	adds	r7, #44	@ 0x2c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	080028d8 	.word	0x080028d8

08000be8 <LL_HRTIM_TIM_SetCompare3>:
  *         periods of the fHRTIM clock, that is 0x60 if CKPSC[2:0] = 0,
  *         0x30 if CKPSC[2:0] = 1, 0x18 if CKPSC[2:0] = 2,...
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCompare3(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t CompareValue)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b08b      	sub	sp, #44	@ 0x2c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa93 f3a3 	rbit	r3, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  return result;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <LL_HRTIM_TIM_SetCompare3+0x26>
    return 32U;
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	e003      	b.n	8000c16 <LL_HRTIM_TIM_SetCompare3+0x2e>
  return __builtin_clz(value);
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos);
 8000c16:	3b10      	subs	r3, #16
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3328      	adds	r3, #40	@ 0x28
 8000c20:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LL_HRTIM_TIM_SetCompare3+0x64>)
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sMasterRegs.MCMP3R) +
 8000c2a:	440b      	add	r3, r1
 8000c2c:	623b      	str	r3, [r7, #32]
  MODIFY_REG(* pReg, HRTIM_MCMP1R_MCMP3R, CompareValue);
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	041b      	lsls	r3, r3, #16
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	372c      	adds	r7, #44	@ 0x2c
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	080028d8 	.word	0x080028d8

08000c50 <LL_HRTIM_TIM_SetResetTrig>:
  *         @arg @ref LL_HRTIM_RESETTRIG_OTHER5_CMP1
  *         @arg @ref LL_HRTIM_RESETTRIG_OTHER5_CMP2
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetResetTrig(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t ResetTrig)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b08b      	sub	sp, #44	@ 0x2c
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	617b      	str	r3, [r7, #20]
  return result;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <LL_HRTIM_TIM_SetResetTrig+0x26>
    return 32U;
 8000c72:	2320      	movs	r3, #32
 8000c74:	e003      	b.n	8000c7e <LL_HRTIM_TIM_SetResetTrig+0x2e>
  return __builtin_clz(value);
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8000c7e:	3b11      	subs	r3, #17
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTxR) +
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	33d4      	adds	r3, #212	@ 0xd4
 8000c88:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000c8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <LL_HRTIM_TIM_SetResetTrig+0x58>)
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTxR) +
 8000c92:	440b      	add	r3, r1
 8000c94:	623b      	str	r3, [r7, #32]
  WRITE_REG(*pReg, ResetTrig);
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	372c      	adds	r7, #44	@ 0x2c
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	080028d8 	.word	0x080028d8

08000cac <LL_HRTIM_TIM_DisableDeadTime>:
  *         @arg @ref LL_HRTIM_TIMER_E
  *         @arg @ref LL_HRTIM_TIMER_F
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_DisableDeadTime(HRTIM_TypeDef *HRTIMx, uint32_t Timer)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	60fb      	str	r3, [r7, #12]
  return result;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <LL_HRTIM_TIM_DisableDeadTime+0x24>
    return 32U;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	e003      	b.n	8000cd8 <LL_HRTIM_TIM_DisableDeadTime+0x2c>
  return __builtin_clz(value);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - HRTIM_MCR_TACEN_Pos);
 8000cd8:	3b11      	subs	r3, #17
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	61fb      	str	r3, [r7, #28]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	33e4      	adds	r3, #228	@ 0xe4
 8000ce2:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000ce4:	4a08      	ldr	r2, [pc, #32]	@ (8000d08 <LL_HRTIM_TIM_DisableDeadTime+0x5c>)
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8000cec:	440b      	add	r3, r1
 8000cee:	61bb      	str	r3, [r7, #24]
  CLEAR_BIT(*pReg, HRTIM_OUTR_DTEN);
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	3724      	adds	r7, #36	@ 0x24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	080028d8 	.word	0x080028d8

08000d0c <LL_HRTIM_TIM_SetBurstModeOption>:
  *         @arg @ref LL_HRTIM_BURSTMODE_MAINTAINCLOCK
  *         @arg @ref LL_HRTIM_BURSTMODE_RESETCOUNTER
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetBurstModeOption(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t BurtsModeOption)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	613b      	str	r3, [r7, #16]
  return result;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <LL_HRTIM_TIM_SetBurstModeOption+0x26>
    return 32U;
 8000d2e:	2320      	movs	r3, #32
 8000d30:	e003      	b.n	8000d3a <LL_HRTIM_TIM_SetBurstModeOption+0x2e>
  return __builtin_clz(value);
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)((POSITION_VAL(Timer) - HRTIM_MCR_MCEN_Pos) & 0x1FU);
 8000d3a:	3b10      	subs	r3, #16
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(HRTIMx->sCommonRegs.BMCR, Timer, BurtsModeOption << iTimer);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f8d3 23a0 	ldr.w	r2, [r3, #928]	@ 0x3a0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8000d60:	bf00      	nop
 8000d62:	3724      	adds	r7, #36	@ 0x24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_HRTIM_TIM_SetTriggeredHalfMode>:
  *         @arg @ref LL_HRTIM_TRIGHALF_ENABLED
  *         @arg @ref LL_HRTIM_TRIGHALF_DISABLED
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetTriggeredHalfMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Mode)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08d      	sub	sp, #52	@ 0x34
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	613b      	str	r3, [r7, #16]
  return result;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <LL_HRTIM_TIM_SetTriggeredHalfMode+0x26>
    return 32U;
 8000d8e:	2220      	movs	r2, #32
 8000d90:	e003      	b.n	8000d9a <LL_HRTIM_TIM_SetTriggeredHalfMode+0x2e>
  return __builtin_clz(value);
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	61fb      	str	r3, [r7, #28]
  return result;
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <LL_HRTIM_TIM_SetTriggeredHalfMode+0x4a>
    return 32U;
 8000db2:	2320      	movs	r3, #32
 8000db4:	e003      	b.n	8000dbe <LL_HRTIM_TIM_SetTriggeredHalfMode+0x52>
  return __builtin_clz(value);
 8000db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	33ec      	adds	r3, #236	@ 0xec
 8000dc8:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LL_HRTIM_TIM_SetTriggeredHalfMode+0x88>)
 8000dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000dd2:	440b      	add	r3, r1
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(* pReg, HRTIM_TIMCR2_TRGHLF, Mode);
 8000dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	3734      	adds	r7, #52	@ 0x34
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	080028d8 	.word	0x080028d8

08000df8 <LL_HRTIM_TIM_SetComp1Mode>:
  *         @arg @ref LL_HRTIM_GTCMP1_EQUAL
  *         @arg @ref LL_HRTIM_GTCMP1_GREATER
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetComp1Mode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Mode)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b08d      	sub	sp, #52	@ 0x34
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	613b      	str	r3, [r7, #16]
  return result;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <LL_HRTIM_TIM_SetComp1Mode+0x26>
    return 32U;
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	e003      	b.n	8000e26 <LL_HRTIM_TIM_SetComp1Mode+0x2e>
  return __builtin_clz(value);
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	61fb      	str	r3, [r7, #28]
  return result;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LL_HRTIM_TIM_SetComp1Mode+0x4a>
    return 32U;
 8000e3e:	2320      	movs	r3, #32
 8000e40:	e003      	b.n	8000e4a <LL_HRTIM_TIM_SetComp1Mode+0x52>
  return __builtin_clz(value);
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	33ec      	adds	r3, #236	@ 0xec
 8000e54:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LL_HRTIM_TIM_SetComp1Mode+0x88>)
 8000e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000e5e:	440b      	add	r3, r1
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP1, Mode);
 8000e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e70:	601a      	str	r2, [r3, #0]
}
 8000e72:	bf00      	nop
 8000e74:	3734      	adds	r7, #52	@ 0x34
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	080028d8 	.word	0x080028d8

08000e84 <LL_HRTIM_TIM_SetComp3Mode>:
  *         @arg @ref LL_HRTIM_GTCMP3_EQUAL
  *         @arg @ref LL_HRTIM_GTCMP3_GREATER
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetComp3Mode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Mode)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b08d      	sub	sp, #52	@ 0x34
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	613b      	str	r3, [r7, #16]
  return result;
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <LL_HRTIM_TIM_SetComp3Mode+0x26>
    return 32U;
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	e003      	b.n	8000eb2 <LL_HRTIM_TIM_SetComp3Mode+0x2e>
  return __builtin_clz(value);
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	fa93 f3a3 	rbit	r3, r3
 8000ebe:	61fb      	str	r3, [r7, #28]
  return result;
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <LL_HRTIM_TIM_SetComp3Mode+0x4a>
    return 32U;
 8000eca:	2320      	movs	r3, #32
 8000ecc:	e003      	b.n	8000ed6 <LL_HRTIM_TIM_SetComp3Mode+0x52>
  return __builtin_clz(value);
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed0:	fab3 f383 	clz	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	33ec      	adds	r3, #236	@ 0xec
 8000ee0:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <LL_HRTIM_TIM_SetComp3Mode+0x88>)
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000eea:	440b      	add	r3, r1
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(* pReg, HRTIM_TIMCR2_GTCMP3, (Mode));
 8000eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3734      	adds	r7, #52	@ 0x34
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	080028d8 	.word	0x080028d8

08000f10 <LL_HRTIM_TIM_SetCountingMode>:
  *         @arg @ref LL_HRTIM_COUNTING_MODE_UP
  *         @arg @ref LL_HRTIM_COUNTING_MODE_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_TIM_SetCountingMode(HRTIM_TypeDef *HRTIMx, uint32_t Timer, uint32_t Mode)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b08d      	sub	sp, #52	@ 0x34
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	613b      	str	r3, [r7, #16]
  return result;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <LL_HRTIM_TIM_SetCountingMode+0x26>
    return 32U;
 8000f32:	2220      	movs	r2, #32
 8000f34:	e003      	b.n	8000f3e <LL_HRTIM_TIM_SetCountingMode+0x2e>
  return __builtin_clz(value);
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	61fb      	str	r3, [r7, #28]
  return result;
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <LL_HRTIM_TIM_SetCountingMode+0x4a>
    return 32U;
 8000f56:	2320      	movs	r3, #32
 8000f58:	e003      	b.n	8000f62 <LL_HRTIM_TIM_SetCountingMode+0x52>
  return __builtin_clz(value);
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
  uint32_t iTimer = (uint8_t)(POSITION_VAL(Timer) - POSITION_VAL(LL_HRTIM_TIMER_A));
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	33ec      	adds	r3, #236	@ 0xec
 8000f6c:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_TIMER[iTimer]));
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <LL_HRTIM_TIM_SetCountingMode+0x88>)
 8000f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].TIMxCR2) +
 8000f76:	440b      	add	r3, r1
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(* pReg, HRTIM_TIMCR2_UDM, Mode);
 8000f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 0210 	bic.w	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	3734      	adds	r7, #52	@ 0x34
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	080028d8 	.word	0x080028d8

08000f9c <LL_HRTIM_OUT_SetOutputSetSrc>:
  *         @arg @ref LL_HRTIM_OUTPUTSET_UPDATE
  *         (source = TIMy and destination = TIMx, Compare Unit = CMPz).
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetOutputSetSrc(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t SetSrc)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b08d      	sub	sp, #52	@ 0x34
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	613b      	str	r3, [r7, #16]
  return result;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <LL_HRTIM_OUT_SetOutputSetSrc+0x26>
    return 32U;
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	e003      	b.n	8000fca <LL_HRTIM_OUT_SetOutputSetSrc+0x2e>
  return __builtin_clz(value);
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	fab3 f383 	clz	r3, r3
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	2301      	movs	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	61fb      	str	r3, [r7, #28]
  return result;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <LL_HRTIM_OUT_SetOutputSetSrc+0x48>
    return 32U;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	e003      	b.n	8000fec <LL_HRTIM_OUT_SetOutputSetSrc+0x50>
  return __builtin_clz(value);
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe6:	fab3 f383 	clz	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].SETx1R) +
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	33bc      	adds	r3, #188	@ 0xbc
 8000ff6:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_SETxR[iOutput]));
 8000ff8:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <LL_HRTIM_OUT_SetOutputSetSrc+0x7c>)
 8000ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].SETx1R) +
 8001000:	440b      	add	r3, r1
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  WRITE_REG(*pReg, SetSrc);
 8001004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3734      	adds	r7, #52	@ 0x34
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	080028e8 	.word	0x080028e8

0800101c <LL_HRTIM_OUT_SetOutputResetSrc>:
  *         @arg @ref LL_HRTIM_OUTPUTRESET_UPDATE
  *         (source = TIMy and destination = TIMx, Compare Unit = CMPz).
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetOutputResetSrc(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t ResetSrc)
{
 800101c:	b480      	push	{r7}
 800101e:	b08d      	sub	sp, #52	@ 0x34
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	613b      	str	r3, [r7, #16]
  return result;
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <LL_HRTIM_OUT_SetOutputResetSrc+0x26>
    return 32U;
 800103e:	2220      	movs	r2, #32
 8001040:	e003      	b.n	800104a <LL_HRTIM_OUT_SetOutputResetSrc+0x2e>
  return __builtin_clz(value);
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	2301      	movs	r3, #1
 800104c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	61fb      	str	r3, [r7, #28]
  return result;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <LL_HRTIM_OUT_SetOutputResetSrc+0x48>
    return 32U;
 8001060:	2320      	movs	r3, #32
 8001062:	e003      	b.n	800106c <LL_HRTIM_OUT_SetOutputResetSrc+0x50>
  return __builtin_clz(value);
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	fab3 f383 	clz	r3, r3
 800106a:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTx1R) +
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	33c0      	adds	r3, #192	@ 0xc0
 8001076:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_SETxR[iOutput]));
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <LL_HRTIM_OUT_SetOutputResetSrc+0x7c>)
 800107a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].RSTx1R) +
 8001080:	440b      	add	r3, r1
 8001082:	62bb      	str	r3, [r7, #40]	@ 0x28
  WRITE_REG(*pReg, ResetSrc);
 8001084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	3734      	adds	r7, #52	@ 0x34
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	080028e8 	.word	0x080028e8

0800109c <LL_HRTIM_OUT_SetPolarity>:
  *         @arg @ref LL_HRTIM_OUT_POSITIVE_POLARITY
  *         @arg @ref LL_HRTIM_OUT_NEGATIVE_POLARITY
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetPolarity(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t Polarity)
{
 800109c:	b480      	push	{r7}
 800109e:	b08d      	sub	sp, #52	@ 0x34
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	613b      	str	r3, [r7, #16]
  return result;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <LL_HRTIM_OUT_SetPolarity+0x26>
    return 32U;
 80010be:	2220      	movs	r2, #32
 80010c0:	e003      	b.n	80010ca <LL_HRTIM_OUT_SetPolarity+0x2e>
  return __builtin_clz(value);
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	fab3 f383 	clz	r3, r3
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	61fb      	str	r3, [r7, #28]
  return result;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <LL_HRTIM_OUT_SetPolarity+0x48>
    return 32U;
 80010e0:	2320      	movs	r3, #32
 80010e2:	e003      	b.n	80010ec <LL_HRTIM_OUT_SetPolarity+0x50>
  return __builtin_clz(value);
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	33e4      	adds	r3, #228	@ 0xe4
 80010f6:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_OUTxR[iOutput]));
 80010f8:	4a10      	ldr	r2, [pc, #64]	@ (800113c <LL_HRTIM_OUT_SetPolarity+0xa0>)
 80010fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001100:	440b      	add	r3, r1
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(*pReg, (HRTIM_OUTR_POL1 << REG_SHIFT_TAB_OUTxR[iOutput]), (Polarity << REG_SHIFT_TAB_OUTxR[iOutput]));
 8001104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LL_HRTIM_OUT_SetPolarity+0xa4>)
 800110a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110c:	440b      	add	r3, r1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	2302      	movs	r3, #2
 8001114:	408b      	lsls	r3, r1
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	4909      	ldr	r1, [pc, #36]	@ (8001140 <LL_HRTIM_OUT_SetPolarity+0xa4>)
 800111c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111e:	440b      	add	r3, r1
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4619      	mov	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	408b      	lsls	r3, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112c:	601a      	str	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	3734      	adds	r7, #52	@ 0x34
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	08002900 	.word	0x08002900
 8001140:	08002964 	.word	0x08002964

08001144 <LL_HRTIM_OUT_SetIdleMode>:
  *         @arg @ref LL_HRTIM_OUT_NO_IDLE
  *         @arg @ref LL_HRTIM_OUT_IDLE_WHEN_BURST
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleMode)
{
 8001144:	b480      	push	{r7}
 8001146:	b08d      	sub	sp, #52	@ 0x34
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	613b      	str	r3, [r7, #16]
  return result;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <LL_HRTIM_OUT_SetIdleMode+0x26>
    return 32U;
 8001166:	2220      	movs	r2, #32
 8001168:	e003      	b.n	8001172 <LL_HRTIM_OUT_SetIdleMode+0x2e>
  return __builtin_clz(value);
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	61fb      	str	r3, [r7, #28]
  return result;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <LL_HRTIM_OUT_SetIdleMode+0x48>
    return 32U;
 8001188:	2320      	movs	r3, #32
 800118a:	e003      	b.n	8001194 <LL_HRTIM_OUT_SetIdleMode+0x50>
  return __builtin_clz(value);
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	33e4      	adds	r3, #228	@ 0xe4
 800119e:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_OUTxR[iOutput]));
 80011a0:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <LL_HRTIM_OUT_SetIdleMode+0xa0>)
 80011a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80011a8:	440b      	add	r3, r1
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLM1 << (REG_SHIFT_TAB_OUTxR[iOutput])), (IdleMode << (REG_SHIFT_TAB_OUTxR[iOutput])));
 80011ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LL_HRTIM_OUT_SetIdleMode+0xa4>)
 80011b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b4:	440b      	add	r3, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2304      	movs	r3, #4
 80011bc:	408b      	lsls	r3, r1
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	4909      	ldr	r1, [pc, #36]	@ (80011e8 <LL_HRTIM_OUT_SetIdleMode+0xa4>)
 80011c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c6:	440b      	add	r3, r1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	408b      	lsls	r3, r1
 80011d0:	431a      	orrs	r2, r3
 80011d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	3734      	adds	r7, #52	@ 0x34
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	08002900 	.word	0x08002900
 80011e8:	08002964 	.word	0x08002964

080011ec <LL_HRTIM_OUT_SetIdleLevel>:
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_IDLELEVEL_ACTIVE
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetIdleLevel(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t IdleLevel)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b08d      	sub	sp, #52	@ 0x34
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	613b      	str	r3, [r7, #16]
  return result;
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <LL_HRTIM_OUT_SetIdleLevel+0x26>
    return 32U;
 800120e:	2220      	movs	r2, #32
 8001210:	e003      	b.n	800121a <LL_HRTIM_OUT_SetIdleLevel+0x2e>
  return __builtin_clz(value);
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	2301      	movs	r3, #1
 800121c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	61fb      	str	r3, [r7, #28]
  return result;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <LL_HRTIM_OUT_SetIdleLevel+0x48>
    return 32U;
 8001230:	2320      	movs	r3, #32
 8001232:	e003      	b.n	800123c <LL_HRTIM_OUT_SetIdleLevel+0x50>
  return __builtin_clz(value);
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	33e4      	adds	r3, #228	@ 0xe4
 8001246:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_OUTxR[iOutput]));
 8001248:	4a10      	ldr	r2, [pc, #64]	@ (800128c <LL_HRTIM_OUT_SetIdleLevel+0xa0>)
 800124a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001250:	440b      	add	r3, r1
 8001252:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(*pReg, (HRTIM_OUTR_IDLES1 << REG_SHIFT_TAB_OUTxR[iOutput]), (IdleLevel << REG_SHIFT_TAB_OUTxR[iOutput]));
 8001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LL_HRTIM_OUT_SetIdleLevel+0xa4>)
 800125a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125c:	440b      	add	r3, r1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	2308      	movs	r3, #8
 8001264:	408b      	lsls	r3, r1
 8001266:	43db      	mvns	r3, r3
 8001268:	401a      	ands	r2, r3
 800126a:	4909      	ldr	r1, [pc, #36]	@ (8001290 <LL_HRTIM_OUT_SetIdleLevel+0xa4>)
 800126c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126e:	440b      	add	r3, r1
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	408b      	lsls	r3, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	3734      	adds	r7, #52	@ 0x34
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	08002900 	.word	0x08002900
 8001290:	08002964 	.word	0x08002964

08001294 <LL_HRTIM_OUT_SetFaultState>:
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_INACTIVE
  *         @arg @ref LL_HRTIM_OUT_FAULTSTATE_HIGHZ
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetFaultState(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t FaultState)
{
 8001294:	b480      	push	{r7}
 8001296:	b08d      	sub	sp, #52	@ 0x34
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	613b      	str	r3, [r7, #16]
  return result;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <LL_HRTIM_OUT_SetFaultState+0x26>
    return 32U;
 80012b6:	2220      	movs	r2, #32
 80012b8:	e003      	b.n	80012c2 <LL_HRTIM_OUT_SetFaultState+0x2e>
  return __builtin_clz(value);
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	61fb      	str	r3, [r7, #28]
  return result;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <LL_HRTIM_OUT_SetFaultState+0x48>
    return 32U;
 80012d8:	2320      	movs	r3, #32
 80012da:	e003      	b.n	80012e4 <LL_HRTIM_OUT_SetFaultState+0x50>
  return __builtin_clz(value);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	33e4      	adds	r3, #228	@ 0xe4
 80012ee:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_OUTxR[iOutput]));
 80012f0:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <LL_HRTIM_OUT_SetFaultState+0xa0>)
 80012f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80012f8:	440b      	add	r3, r1
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(*pReg, (HRTIM_OUTR_FAULT1 << REG_SHIFT_TAB_OUTxR[iOutput]), (FaultState << REG_SHIFT_TAB_OUTxR[iOutput]));
 80012fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	490d      	ldr	r1, [pc, #52]	@ (8001338 <LL_HRTIM_OUT_SetFaultState+0xa4>)
 8001302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001304:	440b      	add	r3, r1
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	2330      	movs	r3, #48	@ 0x30
 800130c:	408b      	lsls	r3, r1
 800130e:	43db      	mvns	r3, r3
 8001310:	401a      	ands	r2, r3
 8001312:	4909      	ldr	r1, [pc, #36]	@ (8001338 <LL_HRTIM_OUT_SetFaultState+0xa4>)
 8001314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001316:	440b      	add	r3, r1
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	408b      	lsls	r3, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	3734      	adds	r7, #52	@ 0x34
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	08002900 	.word	0x08002900
 8001338:	08002964 	.word	0x08002964

0800133c <LL_HRTIM_OUT_SetChopperMode>:
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_DISABLED
  *         @arg @ref LL_HRTIM_OUT_CHOPPERMODE_ENABLED
  * @retval None
  */
__STATIC_INLINE void LL_HRTIM_OUT_SetChopperMode(HRTIM_TypeDef *HRTIMx, uint32_t Output, uint32_t ChopperMode)
{
 800133c:	b480      	push	{r7}
 800133e:	b08d      	sub	sp, #52	@ 0x34
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	613b      	str	r3, [r7, #16]
  return result;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <LL_HRTIM_OUT_SetChopperMode+0x26>
    return 32U;
 800135e:	2220      	movs	r2, #32
 8001360:	e003      	b.n	800136a <LL_HRTIM_OUT_SetChopperMode+0x2e>
  return __builtin_clz(value);
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	b2da      	uxtb	r2, r3
 800136a:	2301      	movs	r3, #1
 800136c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	61fb      	str	r3, [r7, #28]
  return result;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <LL_HRTIM_OUT_SetChopperMode+0x48>
    return 32U;
 8001380:	2320      	movs	r3, #32
 8001382:	e003      	b.n	800138c <LL_HRTIM_OUT_SetChopperMode+0x50>
  return __builtin_clz(value);
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
  uint32_t iOutput = (uint8_t)(POSITION_VAL(Output) - POSITION_VAL(LL_HRTIM_OUTPUT_TA1));
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	33e4      	adds	r3, #228	@ 0xe4
 8001396:	4619      	mov	r1, r3
                                                     REG_OFFSET_TAB_OUTxR[iOutput]));
 8001398:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <LL_HRTIM_OUT_SetChopperMode+0xa0>)
 800139a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&HRTIMx->sTimerxRegs[0].OUTxR) +
 80013a0:	440b      	add	r3, r1
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  MODIFY_REG(*pReg, (HRTIM_OUTR_CHP1 << REG_SHIFT_TAB_OUTxR[iOutput]), (ChopperMode << REG_SHIFT_TAB_OUTxR[iOutput]));
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	490d      	ldr	r1, [pc, #52]	@ (80013e0 <LL_HRTIM_OUT_SetChopperMode+0xa4>)
 80013aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2340      	movs	r3, #64	@ 0x40
 80013b4:	408b      	lsls	r3, r1
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	4909      	ldr	r1, [pc, #36]	@ (80013e0 <LL_HRTIM_OUT_SetChopperMode+0xa4>)
 80013bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013be:	440b      	add	r3, r1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	408b      	lsls	r3, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	3734      	adds	r7, #52	@ 0x34
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	08002900 	.word	0x08002900
 80013e0:	08002964 	.word	0x08002964

080013e4 <LL_HRTIM_IsActiveFlag_DLLRDY>:
  * @rmtoll ISR     DLLRDY           LL_HRTIM_IsActiveFlag_DLLRDY
  * @param  HRTIMx High Resolution Timer instance
  * @retval State of DLLRDY bit in HRTIM_ISR register (1 or 0).
  */
__STATIC_INLINE uint32_t LL_HRTIM_IsActiveFlag_DLLRDY(const HRTIM_TypeDef *HRTIMx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(HRTIMx->sCommonRegs.ISR, HRTIM_ISR_DLLRDY) == (HRTIM_ISR_DLLRDY)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013fa:	d101      	bne.n	8001400 <LL_HRTIM_IsActiveFlag_DLLRDY+0x1c>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <LL_HRTIM_IsActiveFlag_DLLRDY+0x1e>
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <LL_RCC_HSE_Enable+0x1c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	@ (800142c <LL_RCC_HSE_Enable+0x1c>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <LL_RCC_HSE_IsReady+0x24>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001440:	d101      	bne.n	8001446 <LL_RCC_HSE_IsReady+0x16>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_RCC_HSE_IsReady+0x18>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <LL_RCC_SetSysClkSource+0x24>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 0203 	bic.w	r2, r3, #3
 8001468:	4904      	ldr	r1, [pc, #16]	@ (800147c <LL_RCC_SetSysClkSource+0x24>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <LL_RCC_GetSysClkSource+0x18>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 030c 	and.w	r3, r3, #12
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ac:	4904      	ldr	r1, [pc, #16]	@ (80014c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000

080014c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014d4:	4904      	ldr	r1, [pc, #16]	@ (80014e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000

080014ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014fc:	4904      	ldr	r1, [pc, #16]	@ (8001510 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000

08001514 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <LL_RCC_PLL_Enable+0x1c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <LL_RCC_PLL_Enable+0x1c>)
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <LL_RCC_PLL_IsReady+0x24>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001540:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001544:	d101      	bne.n	800154a <LL_RCC_PLL_IsReady+0x16>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_RCC_PLL_IsReady+0x18>
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001570:	4013      	ands	r3, r2
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	0212      	lsls	r2, r2, #8
 800157c:	4311      	orrs	r1, r2
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	4904      	ldr	r1, [pc, #16]	@ (8001594 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40021000 	.word	0x40021000
 8001598:	f9ff800c 	.word	0xf9ff800c

0800159c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015c8:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000

080015ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001602:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001626:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001628:	4907      	ldr	r1, [pc, #28]	@ (8001648 <LL_APB2_GRP1_EnableClock+0x2c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001632:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000

0800164c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <LL_SYSCFG_SetEXTISource+0x6c>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	3302      	adds	r3, #2
 8001660:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	0c1b      	lsrs	r3, r3, #16
 8001668:	43db      	mvns	r3, r3
 800166a:	ea02 0103 	and.w	r1, r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	60fb      	str	r3, [r7, #12]
  return result;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <LL_SYSCFG_SetEXTISource+0x3e>
    return 32U;
 8001686:	2320      	movs	r3, #32
 8001688:	e003      	b.n	8001692 <LL_SYSCFG_SetEXTISource+0x46>
  return __builtin_clz(value);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	409a      	lsls	r2, r3
 800169a:	4807      	ldr	r0, [pc, #28]	@ (80016b8 <LL_SYSCFG_SetEXTISource+0x6c>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	430a      	orrs	r2, r1
 80016a4:	3302      	adds	r3, #2
 80016a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40010000 	.word	0x40010000

080016bc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <LL_FLASH_SetLatency+0x24>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 020f 	bic.w	r2, r3, #15
 80016cc:	4904      	ldr	r1, [pc, #16]	@ (80016e0 <LL_FLASH_SetLatency+0x24>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40022000 	.word	0x40022000

080016e4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <LL_FLASH_GetLatency+0x18>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000

08001700 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <LL_PWR_EnableRange1BoostMode+0x20>)
 8001706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <LL_PWR_EnableRange1BoostMode+0x20>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000

08001724 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001732:	6093      	str	r3, [r2, #8]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40007000 	.word	0x40007000

08001744 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001744:	b480      	push	{r7}
 8001746:	b08b      	sub	sp, #44	@ 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	613b      	str	r3, [r7, #16]
  return result;
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800176a:	2320      	movs	r3, #32
 800176c:	e003      	b.n	8001776 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2103      	movs	r1, #3
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	401a      	ands	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	61fb      	str	r3, [r7, #28]
  return result;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001798:	2320      	movs	r3, #32
 800179a:	e003      	b.n	80017a4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	@ 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80017be:	b480      	push	{r7}
 80017c0:	b08b      	sub	sp, #44	@ 0x2c
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	613b      	str	r3, [r7, #16]
  return result;
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80017e4:	2320      	movs	r3, #32
 80017e6:	e003      	b.n	80017f0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2103      	movs	r1, #3
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	401a      	ands	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	61fb      	str	r3, [r7, #28]
  return result;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001812:	2320      	movs	r3, #32
 8001814:	e003      	b.n	800181e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	60da      	str	r2, [r3, #12]
}
 800182c:	bf00      	nop
 800182e:	372c      	adds	r7, #44	@ 0x2c
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	4013      	ands	r3, r2
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43d9      	mvns	r1, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	400b      	ands	r3, r1
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff fec5 	bl	800161c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001892:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001896:	f7ff fea9 	bl	80015ec <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	2003      	movs	r0, #3
 800189c:	f7fe fce6 	bl	800026c <__NVIC_SetPriorityGrouping>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 80018a0:	f7ff ff40 	bl	8001724 <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f81a 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a8:	f000 fa9a 	bl	8001de0 <MX_GPIO_Init>
  MX_HRTIM1_Init();
 80018ac:	f000 f866 	bl	800197c <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Enable HRTIM's outputs TA1, TA2, TD1 and TD2, and start Timer A and D */
  LL_HRTIM_EnableOutput(HRTIM1, LL_HRTIM_OUTPUT_TA1
 80018b0:	21c3      	movs	r1, #195	@ 0xc3
 80018b2:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <main+0x50>)
 80018b4:	f7fe fd9d 	bl	80003f2 <LL_HRTIM_EnableOutput>
                        | LL_HRTIM_OUTPUT_TA2
                        | LL_HRTIM_OUTPUT_TD1
                        | LL_HRTIM_OUTPUT_TD2);
  LL_HRTIM_TIM_CounterEnable(HRTIM1, LL_HRTIM_TIMER_A | LL_HRTIM_TIMER_D);
 80018b8:	f44f 1190 	mov.w	r1, #1179648	@ 0x120000
 80018bc:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <main+0x50>)
 80018be:	f7fe fdc5 	bl	800044c <LL_HRTIM_TIM_CounterEnable>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80018c2:	2120      	movs	r1, #32
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c8:	f7ff ffc4 	bl	8001854 <LL_GPIO_TogglePin>
    
    /* Insert delay 100 ms */
    LL_mDelay(100);
 80018cc:	2064      	movs	r0, #100	@ 0x64
 80018ce:	f000 ff9b 	bl	8002808 <LL_mDelay>
    LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80018d2:	bf00      	nop
 80018d4:	e7f5      	b.n	80018c2 <main+0x3a>
 80018d6:	bf00      	nop
 80018d8:	40016800 	.word	0x40016800

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f7ff feea 	bl	80016bc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 80018e8:	bf00      	nop
 80018ea:	f7ff fefb 	bl	80016e4 <LL_FLASH_GetLatency>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d1fa      	bne.n	80018ea <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 80018f4:	f7ff ff04 	bl	8001700 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSE_Enable();
 80018f8:	f7ff fd8a 	bl	8001410 <LL_RCC_HSE_Enable>
   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80018fc:	bf00      	nop
 80018fe:	f7ff fd97 	bl	8001430 <LL_RCC_HSE_IsReady>
 8001902:	4603      	mov	r3, r0
 8001904:	2b01      	cmp	r3, #1
 8001906:	d1fa      	bne.n	80018fe <SystemClock_Config+0x22>
  {
  }

  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_6, 85, LL_RCC_PLLR_DIV_2);
 8001908:	2300      	movs	r3, #0
 800190a:	2255      	movs	r2, #85	@ 0x55
 800190c:	2150      	movs	r1, #80	@ 0x50
 800190e:	2003      	movs	r0, #3
 8001910:	f7ff fe24 	bl	800155c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001914:	f7ff fe42 	bl	800159c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001918:	f7ff fdfc 	bl	8001514 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800191c:	bf00      	nop
 800191e:	f7ff fe09 	bl	8001534 <LL_RCC_PLL_IsReady>
 8001922:	4603      	mov	r3, r0
 8001924:	2b01      	cmp	r3, #1
 8001926:	d1fa      	bne.n	800191e <SystemClock_Config+0x42>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001928:	2003      	movs	r0, #3
 800192a:	f7ff fd95 	bl	8001458 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800192e:	2080      	movs	r0, #128	@ 0x80
 8001930:	f7ff fdb4 	bl	800149c <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001934:	bf00      	nop
 8001936:	f7ff fda3 	bl	8001480 <LL_RCC_GetSysClkSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d1fa      	bne.n	8001936 <SystemClock_Config+0x5a>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 8001940:	2355      	movs	r3, #85	@ 0x55
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e002      	b.n	800194c <SystemClock_Config+0x70>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3b01      	subs	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f9      	bne.n	8001946 <SystemClock_Config+0x6a>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fda2 	bl	800149c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fdb3 	bl	80014c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fdc4 	bl	80014ec <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <SystemClock_Config+0x9c>)
 8001966:	f000 ff41 	bl	80027ec <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <SystemClock_Config+0x9c>)
 800196c:	f000 ff74 	bl	8002858 <LL_SetSystemCoreClock>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	0a21fe80 	.word	0x0a21fe80

0800197c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_HRTIM1);
 8001992:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001996:	f7ff fe41 	bl	800161c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  LL_HRTIM_ConfigDLLCalibration(HRTIM1, LL_HRTIM_DLLCALIBRATION_MODE_CONTINUOUS, LL_HRTIM_DLLCALIBRATION_RATE_3);
 800199a:	220c      	movs	r2, #12
 800199c:	2102      	movs	r1, #2
 800199e:	48d6      	ldr	r0, [pc, #856]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019a0:	f7fe fd3c 	bl	800041c <LL_HRTIM_ConfigDLLCalibration>
  /* Poll for DLL end of calibration */
#if (USE_TIMEOUT == 1)
  uint32_t Timeout = 10; /* Timeout Initialization */
#endif  /*USE_TIMEOUT*/

  while(LL_HRTIM_IsActiveFlag_DLLRDY(HRTIM1) == RESET){
 80019a4:	bf00      	nop
 80019a6:	48d4      	ldr	r0, [pc, #848]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019a8:	f7ff fd1c 	bl	80013e4 <LL_HRTIM_IsActiveFlag_DLLRDY>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f9      	beq.n	80019a6 <MX_HRTIM1_Init+0x2a>
        }
    }
#endif  /* USE_TIMEOUT */
  }

  LL_HRTIM_TIM_SetPrescaler(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_PRESCALERRATIO_MUL32);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80019b8:	48cf      	ldr	r0, [pc, #828]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019ba:	f7fe fd59 	bl	8000470 <LL_HRTIM_TIM_SetPrescaler>
  LL_HRTIM_TIM_SetCounterMode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_MODE_CONTINUOUS);
 80019be:	2208      	movs	r2, #8
 80019c0:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80019c4:	48cc      	ldr	r0, [pc, #816]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019c6:	f7fe fd85 	bl	80004d4 <LL_HRTIM_TIM_SetCounterMode>
  LL_HRTIM_TIM_SetPeriod(HRTIM1, LL_HRTIM_TIMER_A, TIMA_PERIOD);
 80019ca:	f24d 4280 	movw	r2, #54400	@ 0xd480
 80019ce:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80019d2:	48c9      	ldr	r0, [pc, #804]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019d4:	f7ff f838 	bl	8000a48 <LL_HRTIM_TIM_SetPeriod>
  LL_HRTIM_TIM_SetRepetition(HRTIM1, LL_HRTIM_TIMER_A, 0x00);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80019de:	48c6      	ldr	r0, [pc, #792]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019e0:	f7ff f866 	bl	8000ab0 <LL_HRTIM_TIM_SetRepetition>
  LL_HRTIM_TIM_SetUpdateGating(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_UPDATEGATING_INDEPENDENT);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80019ea:	48c3      	ldr	r0, [pc, #780]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019ec:	f7fe ff58 	bl	80008a0 <LL_HRTIM_TIM_SetUpdateGating>
  LL_HRTIM_TIM_SetCountingMode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_COUNTING_MODE_UP);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80019f6:	48c0      	ldr	r0, [pc, #768]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 80019f8:	f7ff fa8a 	bl	8000f10 <LL_HRTIM_TIM_SetCountingMode>
  LL_HRTIM_TIM_SetTriggeredHalfMode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_TRIGHALF_DISABLED);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a02:	48bd      	ldr	r0, [pc, #756]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a04:	f7ff f9b2 	bl	8000d6c <LL_HRTIM_TIM_SetTriggeredHalfMode>
  LL_HRTIM_TIM_SetComp1Mode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_GTCMP1_GREATER);
 8001a08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a0c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a10:	48b9      	ldr	r0, [pc, #740]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a12:	f7ff f9f1 	bl	8000df8 <LL_HRTIM_TIM_SetComp1Mode>
  LL_HRTIM_TIM_SetComp3Mode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_GTCMP3_EQUAL);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a1c:	48b6      	ldr	r0, [pc, #728]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a1e:	f7ff fa31 	bl	8000e84 <LL_HRTIM_TIM_SetComp3Mode>
  LL_HRTIM_TIM_SetDACTrig(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_DACTRIG_NONE);
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a28:	48b3      	ldr	r0, [pc, #716]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a2a:	f7fe fe97 	bl	800075c <LL_HRTIM_TIM_SetDACTrig>
  LL_HRTIM_TIM_DisableHalfMode(HRTIM1, LL_HRTIM_TIMER_A);
 8001a2e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a32:	48b1      	ldr	r0, [pc, #708]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a34:	f7fe fd80 	bl	8000538 <LL_HRTIM_TIM_DisableHalfMode>
  LL_HRTIM_TIM_SetInterleavedMode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_INTERLEAVED_MODE_DISABLED);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a3e:	48ae      	ldr	r0, [pc, #696]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a40:	f7fe fde8 	bl	8000614 <LL_HRTIM_TIM_SetInterleavedMode>
  LL_HRTIM_TIM_DisableStartOnSync(HRTIM1, LL_HRTIM_TIMER_A);
 8001a44:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a48:	48ab      	ldr	r0, [pc, #684]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a4a:	f7fe fe27 	bl	800069c <LL_HRTIM_TIM_DisableStartOnSync>
  LL_HRTIM_TIM_DisableResetOnSync(HRTIM1, LL_HRTIM_TIMER_A);
 8001a4e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a52:	48a9      	ldr	r0, [pc, #676]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a54:	f7fe fe52 	bl	80006fc <LL_HRTIM_TIM_DisableResetOnSync>
  LL_HRTIM_TIM_DisablePreload(HRTIM1, LL_HRTIM_TIMER_A);
 8001a58:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a5c:	48a6      	ldr	r0, [pc, #664]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a5e:	f7fe feaf 	bl	80007c0 <LL_HRTIM_TIM_DisablePreload>
  LL_HRTIM_TIM_SetUpdateTrig(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_UPDATETRIG_NONE|LL_HRTIM_UPDATETRIG_NONE);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a68:	48a3      	ldr	r0, [pc, #652]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a6a:	f7fe fed9 	bl	8000820 <LL_HRTIM_TIM_SetUpdateTrig>
  LL_HRTIM_TIM_SetResetTrig(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_RESETTRIG_NONE);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a74:	48a0      	ldr	r0, [pc, #640]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a76:	f7ff f8eb 	bl	8000c50 <LL_HRTIM_TIM_SetResetTrig>
  LL_HRTIM_TIM_DisablePushPullMode(HRTIM1, LL_HRTIM_TIMER_A);
 8001a7a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a7e:	489e      	ldr	r0, [pc, #632]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a80:	f7fe ff4e 	bl	8000920 <LL_HRTIM_TIM_DisablePushPullMode>
  LL_HRTIM_TIM_DisableDeadTime(HRTIM1, LL_HRTIM_TIMER_A);
 8001a84:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a88:	489b      	ldr	r0, [pc, #620]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a8a:	f7ff f90f 	bl	8000cac <LL_HRTIM_TIM_DisableDeadTime>
  LL_HRTIM_TIM_SetBurstModeOption(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_BURSTMODE_MAINTAINCLOCK);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a94:	4898      	ldr	r0, [pc, #608]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001a96:	f7ff f939 	bl	8000d0c <LL_HRTIM_TIM_SetBurstModeOption>
  LL_HRTIM_ForceUpdate(HRTIM1, LL_HRTIM_TIMER_A);
 8001a9a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001a9e:	4896      	ldr	r0, [pc, #600]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001aa0:	f7fe fc91 	bl	80003c6 <LL_HRTIM_ForceUpdate>
  LL_HRTIM_TIM_DisableResyncUpdate(HRTIM1, LL_HRTIM_TIMER_A);
 8001aa4:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001aa8:	4893      	ldr	r0, [pc, #588]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001aaa:	f7fe fd83 	bl	80005b4 <LL_HRTIM_TIM_DisableResyncUpdate>
  LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_A, TIMA_PERIOD/4);
 8001aae:	f243 5220 	movw	r2, #13600	@ 0x3520
 8001ab2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001ab6:	4890      	ldr	r0, [pc, #576]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ab8:	f7ff f82e 	bl	8000b18 <LL_HRTIM_TIM_SetCompare1>
  LL_HRTIM_TIM_SetCompareMode(HRTIM1, LL_HRTIM_TIMER_A, LL_HRTIM_COMPAREUNIT_2, LL_HRTIM_COMPAREMODE_REGULAR);
 8001abc:	2300      	movs	r3, #0
 8001abe:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001ac2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001ac6:	488c      	ldr	r0, [pc, #560]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ac8:	f7fe ff5a 	bl	8000980 <LL_HRTIM_TIM_SetCompareMode>
  LL_HRTIM_TIM_SetCompare2(HRTIM1, LL_HRTIM_TIMER_A, TIMA_PERIOD/2);
 8001acc:	f646 2240 	movw	r2, #27200	@ 0x6a40
 8001ad0:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001ad4:	4888      	ldr	r0, [pc, #544]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ad6:	f7ff f853 	bl	8000b80 <LL_HRTIM_TIM_SetCompare2>
  LL_HRTIM_TIM_SetCompare3(HRTIM1, LL_HRTIM_TIMER_A, (3*TIMA_PERIOD)/4);
 8001ada:	f649 7260 	movw	r2, #40800	@ 0x9f60
 8001ade:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001ae2:	4885      	ldr	r0, [pc, #532]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ae4:	f7ff f880 	bl	8000be8 <LL_HRTIM_TIM_SetCompare3>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2101      	movs	r1, #1
 8001aec:	4882      	ldr	r0, [pc, #520]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001aee:	f7ff fad5 	bl	800109c <LL_HRTIM_OUT_SetPolarity>
  LL_HRTIM_OUT_SetOutputSetSrc(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUTPUTSET_TIMPER);
 8001af2:	2204      	movs	r2, #4
 8001af4:	2101      	movs	r1, #1
 8001af6:	4880      	ldr	r0, [pc, #512]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001af8:	f7ff fa50 	bl	8000f9c <LL_HRTIM_OUT_SetOutputSetSrc>
  LL_HRTIM_OUT_SetOutputResetSrc(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUTPUTRESET_TIMCMP1);
 8001afc:	2208      	movs	r2, #8
 8001afe:	2101      	movs	r1, #1
 8001b00:	487d      	ldr	r0, [pc, #500]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b02:	f7ff fa8b 	bl	800101c <LL_HRTIM_OUT_SetOutputResetSrc>
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUT_NO_IDLE);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2101      	movs	r1, #1
 8001b0a:	487b      	ldr	r0, [pc, #492]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b0c:	f7ff fb1a 	bl	8001144 <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	4878      	ldr	r0, [pc, #480]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b16:	f7ff fb69 	bl	80011ec <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4876      	ldr	r0, [pc, #472]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b20:	f7ff fbb8 	bl	8001294 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TA1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2101      	movs	r1, #1
 8001b28:	4873      	ldr	r0, [pc, #460]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b2a:	f7ff fc07 	bl	800133c <LL_HRTIM_OUT_SetChopperMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2102      	movs	r1, #2
 8001b32:	4871      	ldr	r0, [pc, #452]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b34:	f7ff fab2 	bl	800109c <LL_HRTIM_OUT_SetPolarity>
  LL_HRTIM_OUT_SetOutputSetSrc(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUTPUTSET_TIMCMP2);
 8001b38:	2210      	movs	r2, #16
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	486e      	ldr	r0, [pc, #440]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b3e:	f7ff fa2d 	bl	8000f9c <LL_HRTIM_OUT_SetOutputSetSrc>
  LL_HRTIM_OUT_SetOutputResetSrc(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUTPUTRESET_TIMCMP3);
 8001b42:	2220      	movs	r2, #32
 8001b44:	2102      	movs	r1, #2
 8001b46:	486c      	ldr	r0, [pc, #432]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b48:	f7ff fa68 	bl	800101c <LL_HRTIM_OUT_SetOutputResetSrc>
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUT_NO_IDLE);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4869      	ldr	r0, [pc, #420]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b52:	f7ff faf7 	bl	8001144 <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4867      	ldr	r0, [pc, #412]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b5c:	f7ff fb46 	bl	80011ec <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2102      	movs	r1, #2
 8001b64:	4864      	ldr	r0, [pc, #400]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b66:	f7ff fb95 	bl	8001294 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TA2, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4862      	ldr	r0, [pc, #392]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b70:	f7ff fbe4 	bl	800133c <LL_HRTIM_OUT_SetChopperMode>
  /* Poll for DLL end of calibration */
#if (USE_TIMEOUT == 1)
  uint32_t Timeout = 10; /* Timeout Initialization */
#endif  /*USE_TIMEOUT*/

  while(LL_HRTIM_IsActiveFlag_DLLRDY(HRTIM1) == RESET){
 8001b74:	bf00      	nop
 8001b76:	4860      	ldr	r0, [pc, #384]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b78:	f7ff fc34 	bl	80013e4 <LL_HRTIM_IsActiveFlag_DLLRDY>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f9      	beq.n	8001b76 <MX_HRTIM1_Init+0x1fa>
        }
    }
#endif  /* USE_TIMEOUT */
  }

  LL_HRTIM_TIM_SetPrescaler(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_PRESCALERRATIO_MUL32);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001b88:	485b      	ldr	r0, [pc, #364]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b8a:	f7fe fc71 	bl	8000470 <LL_HRTIM_TIM_SetPrescaler>
  LL_HRTIM_TIM_SetCounterMode(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_MODE_CONTINUOUS);
 8001b8e:	2208      	movs	r2, #8
 8001b90:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001b94:	4858      	ldr	r0, [pc, #352]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001b96:	f7fe fc9d 	bl	80004d4 <LL_HRTIM_TIM_SetCounterMode>
  LL_HRTIM_TIM_SetPeriod(HRTIM1, LL_HRTIM_TIMER_D, TIMD_PERIOD);
 8001b9a:	f649 7260 	movw	r2, #40800	@ 0x9f60
 8001b9e:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001ba2:	4855      	ldr	r0, [pc, #340]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ba4:	f7fe ff50 	bl	8000a48 <LL_HRTIM_TIM_SetPeriod>
  LL_HRTIM_TIM_SetRepetition(HRTIM1, LL_HRTIM_TIMER_D, 0x00);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bae:	4852      	ldr	r0, [pc, #328]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001bb0:	f7fe ff7e 	bl	8000ab0 <LL_HRTIM_TIM_SetRepetition>
  LL_HRTIM_TIM_SetUpdateGating(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_UPDATEGATING_INDEPENDENT);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bba:	484f      	ldr	r0, [pc, #316]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001bbc:	f7fe fe70 	bl	80008a0 <LL_HRTIM_TIM_SetUpdateGating>
  LL_HRTIM_TIM_SetCountingMode(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_COUNTING_MODE_UP);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bc6:	484c      	ldr	r0, [pc, #304]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001bc8:	f7ff f9a2 	bl	8000f10 <LL_HRTIM_TIM_SetCountingMode>
  LL_HRTIM_TIM_SetTriggeredHalfMode(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_TRIGHALF_DISABLED);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bd2:	4849      	ldr	r0, [pc, #292]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001bd4:	f7ff f8ca 	bl	8000d6c <LL_HRTIM_TIM_SetTriggeredHalfMode>
  LL_HRTIM_TIM_SetComp1Mode(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_GTCMP1_EQUAL);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bde:	4846      	ldr	r0, [pc, #280]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001be0:	f7ff f90a 	bl	8000df8 <LL_HRTIM_TIM_SetComp1Mode>
  LL_HRTIM_TIM_SetDACTrig(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_DACTRIG_NONE);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bea:	4843      	ldr	r0, [pc, #268]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001bec:	f7fe fdb6 	bl	800075c <LL_HRTIM_TIM_SetDACTrig>
  LL_HRTIM_TIM_DisableHalfMode(HRTIM1, LL_HRTIM_TIMER_D);
 8001bf0:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001bf4:	4840      	ldr	r0, [pc, #256]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001bf6:	f7fe fc9f 	bl	8000538 <LL_HRTIM_TIM_DisableHalfMode>
  LL_HRTIM_TIM_SetInterleavedMode(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_INTERLEAVED_MODE_DISABLED);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c00:	483d      	ldr	r0, [pc, #244]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c02:	f7fe fd07 	bl	8000614 <LL_HRTIM_TIM_SetInterleavedMode>
  LL_HRTIM_TIM_DisableStartOnSync(HRTIM1, LL_HRTIM_TIMER_D);
 8001c06:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c0a:	483b      	ldr	r0, [pc, #236]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c0c:	f7fe fd46 	bl	800069c <LL_HRTIM_TIM_DisableStartOnSync>
  LL_HRTIM_TIM_DisableResetOnSync(HRTIM1, LL_HRTIM_TIMER_D);
 8001c10:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c14:	4838      	ldr	r0, [pc, #224]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c16:	f7fe fd71 	bl	80006fc <LL_HRTIM_TIM_DisableResetOnSync>
  LL_HRTIM_TIM_DisablePreload(HRTIM1, LL_HRTIM_TIMER_D);
 8001c1a:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c1e:	4836      	ldr	r0, [pc, #216]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c20:	f7fe fdce 	bl	80007c0 <LL_HRTIM_TIM_DisablePreload>
  LL_HRTIM_TIM_SetUpdateTrig(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_UPDATETRIG_NONE|LL_HRTIM_UPDATETRIG_NONE);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c2a:	4833      	ldr	r0, [pc, #204]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c2c:	f7fe fdf8 	bl	8000820 <LL_HRTIM_TIM_SetUpdateTrig>
  LL_HRTIM_TIM_SetResetTrig(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_RESETTRIG_NONE);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c36:	4830      	ldr	r0, [pc, #192]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c38:	f7ff f80a 	bl	8000c50 <LL_HRTIM_TIM_SetResetTrig>
  LL_HRTIM_TIM_DisablePushPullMode(HRTIM1, LL_HRTIM_TIMER_D);
 8001c3c:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c40:	482d      	ldr	r0, [pc, #180]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c42:	f7fe fe6d 	bl	8000920 <LL_HRTIM_TIM_DisablePushPullMode>
  LL_HRTIM_TIM_DisableDeadTime(HRTIM1, LL_HRTIM_TIMER_D);
 8001c46:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c4a:	482b      	ldr	r0, [pc, #172]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c4c:	f7ff f82e 	bl	8000cac <LL_HRTIM_TIM_DisableDeadTime>
  LL_HRTIM_TIM_SetBurstModeOption(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_BURSTMODE_MAINTAINCLOCK);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c56:	4828      	ldr	r0, [pc, #160]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c58:	f7ff f858 	bl	8000d0c <LL_HRTIM_TIM_SetBurstModeOption>
  LL_HRTIM_ForceUpdate(HRTIM1, LL_HRTIM_TIMER_D);
 8001c5c:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c60:	4825      	ldr	r0, [pc, #148]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c62:	f7fe fbb0 	bl	80003c6 <LL_HRTIM_ForceUpdate>
  LL_HRTIM_TIM_DisableResyncUpdate(HRTIM1, LL_HRTIM_TIMER_D);
 8001c66:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c6a:	4823      	ldr	r0, [pc, #140]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c6c:	f7fe fca2 	bl	80005b4 <LL_HRTIM_TIM_DisableResyncUpdate>
  LL_HRTIM_TIM_SetCompare1(HRTIM1, LL_HRTIM_TIMER_D, TIMD_PERIOD/4);
 8001c70:	f242 72d8 	movw	r2, #10200	@ 0x27d8
 8001c74:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c78:	481f      	ldr	r0, [pc, #124]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c7a:	f7fe ff4d 	bl	8000b18 <LL_HRTIM_TIM_SetCompare1>
  LL_HRTIM_TIM_SetCompareMode(HRTIM1, LL_HRTIM_TIMER_D, LL_HRTIM_COMPAREUNIT_2, LL_HRTIM_COMPAREMODE_REGULAR);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001c84:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c88:	481b      	ldr	r0, [pc, #108]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c8a:	f7fe fe79 	bl	8000980 <LL_HRTIM_TIM_SetCompareMode>
  LL_HRTIM_TIM_SetCompare2(HRTIM1, LL_HRTIM_TIMER_D, (3*TIMD_PERIOD)/4);
 8001c8e:	f247 7288 	movw	r2, #30600	@ 0x7788
 8001c92:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001c96:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001c98:	f7fe ff72 	bl	8000b80 <LL_HRTIM_TIM_SetCompare2>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2140      	movs	r1, #64	@ 0x40
 8001ca0:	4815      	ldr	r0, [pc, #84]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ca2:	f7ff f9fb 	bl	800109c <LL_HRTIM_OUT_SetPolarity>
  LL_HRTIM_OUT_SetOutputSetSrc(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUTPUTSET_TIMPER);
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	2140      	movs	r1, #64	@ 0x40
 8001caa:	4813      	ldr	r0, [pc, #76]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cac:	f7ff f976 	bl	8000f9c <LL_HRTIM_OUT_SetOutputSetSrc>
  LL_HRTIM_OUT_SetOutputResetSrc(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUTPUTRESET_TIMCMP1);
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	2140      	movs	r1, #64	@ 0x40
 8001cb4:	4810      	ldr	r0, [pc, #64]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cb6:	f7ff f9b1 	bl	800101c <LL_HRTIM_OUT_SetOutputResetSrc>
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUT_NO_IDLE);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	480e      	ldr	r0, [pc, #56]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cc0:	f7ff fa40 	bl	8001144 <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2140      	movs	r1, #64	@ 0x40
 8001cc8:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cca:	f7ff fa8f 	bl	80011ec <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cd4:	f7ff fade 	bl	8001294 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TD1, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2140      	movs	r1, #64	@ 0x40
 8001cdc:	4806      	ldr	r0, [pc, #24]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cde:	f7ff fb2d 	bl	800133c <LL_HRTIM_OUT_SetChopperMode>
  LL_HRTIM_OUT_SetPolarity(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUT_POSITIVE_POLARITY);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2180      	movs	r1, #128	@ 0x80
 8001ce6:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001ce8:	f7ff f9d8 	bl	800109c <LL_HRTIM_OUT_SetPolarity>
  LL_HRTIM_OUT_SetOutputSetSrc(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUTPUTSET_TIMCMP2);
 8001cec:	2210      	movs	r2, #16
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	4801      	ldr	r0, [pc, #4]	@ (8001cf8 <MX_HRTIM1_Init+0x37c>)
 8001cf2:	f7ff f953 	bl	8000f9c <LL_HRTIM_OUT_SetOutputSetSrc>
 8001cf6:	e001      	b.n	8001cfc <MX_HRTIM1_Init+0x380>
 8001cf8:	40016800 	.word	0x40016800
  LL_HRTIM_OUT_SetOutputResetSrc(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUTPUTRESET_TIMPER);
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	2180      	movs	r1, #128	@ 0x80
 8001d00:	4835      	ldr	r0, [pc, #212]	@ (8001dd8 <MX_HRTIM1_Init+0x45c>)
 8001d02:	f7ff f98b 	bl	800101c <LL_HRTIM_OUT_SetOutputResetSrc>
  LL_HRTIM_OUT_SetIdleMode(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUT_NO_IDLE);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	4833      	ldr	r0, [pc, #204]	@ (8001dd8 <MX_HRTIM1_Init+0x45c>)
 8001d0c:	f7ff fa1a 	bl	8001144 <LL_HRTIM_OUT_SetIdleMode>
  LL_HRTIM_OUT_SetIdleLevel(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUT_IDLELEVEL_INACTIVE);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	4830      	ldr	r0, [pc, #192]	@ (8001dd8 <MX_HRTIM1_Init+0x45c>)
 8001d16:	f7ff fa69 	bl	80011ec <LL_HRTIM_OUT_SetIdleLevel>
  LL_HRTIM_OUT_SetFaultState(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUT_FAULTSTATE_NO_ACTION);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	482e      	ldr	r0, [pc, #184]	@ (8001dd8 <MX_HRTIM1_Init+0x45c>)
 8001d20:	f7ff fab8 	bl	8001294 <LL_HRTIM_OUT_SetFaultState>
  LL_HRTIM_OUT_SetChopperMode(HRTIM1, LL_HRTIM_OUTPUT_TD2, LL_HRTIM_OUT_CHOPPERMODE_DISABLED);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	@ 0x80
 8001d28:	482b      	ldr	r0, [pc, #172]	@ (8001dd8 <MX_HRTIM1_Init+0x45c>)
 8001d2a:	f7ff fb07 	bl	800133c <LL_HRTIM_OUT_SetChopperMode>
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7ff fc44 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff fc41 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  PB14   ------> HRTIM1_CHD1
  PB15   ------> HRTIM1_CHD2
  PA8   ------> HRTIM1_CHA1
  PA9   ------> HRTIM1_CHA2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001d3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d40:	2302      	movs	r3, #2
 8001d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001d50:	230d      	movs	r3, #13
 8001d52:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	463b      	mov	r3, r7
 8001d56:	4619      	mov	r1, r3
 8001d58:	4820      	ldr	r0, [pc, #128]	@ (8001ddc <MX_HRTIM1_Init+0x460>)
 8001d5a:	f000 fcbe 	bl	80026da <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d64:	2302      	movs	r3, #2
 8001d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001d74:	230d      	movs	r3, #13
 8001d76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4817      	ldr	r0, [pc, #92]	@ (8001ddc <MX_HRTIM1_Init+0x460>)
 8001d7e:	f000 fcac 	bl	80026da <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001d98:	230d      	movs	r3, #13
 8001d9a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da4:	f000 fc99 	bl	80026da <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dae:	2302      	movs	r3, #2
 8001db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_13;
 8001dbe:	230d      	movs	r3, #13
 8001dc0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f000 fc86 	bl	80026da <LL_GPIO_Init>

}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40016800 	.word	0x40016800
 8001ddc:	48000400 	.word	0x48000400

08001de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	@ 0x28
 8001de4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001e02:	2004      	movs	r0, #4
 8001e04:	f7ff fbda 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001e08:	2020      	movs	r0, #32
 8001e0a:	f7ff fbd7 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff fbd4 	bl	80015bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001e14:	2002      	movs	r0, #2
 8001e16:	f7ff fbd1 	bl	80015bc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e20:	f7ff fd0a 	bl	8001838 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001e24:	4933      	ldr	r1, [pc, #204]	@ (8001ef4 <MX_GPIO_Init+0x114>)
 8001e26:	2002      	movs	r0, #2
 8001e28:	f7ff fc10 	bl	800164c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e30:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fa05 	bl	8002258 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e54:	4828      	ldr	r0, [pc, #160]	@ (8001ef8 <MX_GPIO_Init+0x118>)
 8001e56:	f7ff fcb2 	bl	80017be <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e60:	4825      	ldr	r0, [pc, #148]	@ (8001ef8 <MX_GPIO_Init+0x118>)
 8001e62:	f7ff fc6f 	bl	8001744 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001e66:	2320      	movs	r3, #32
 8001e68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e82:	f000 fc2a 	bl	80026da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001e86:	2310      	movs	r3, #16
 8001e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4815      	ldr	r0, [pc, #84]	@ (8001ef8 <MX_GPIO_Init+0x118>)
 8001ea4:	f000 fc19 	bl	80026da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eac:	2302      	movs	r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <MX_GPIO_Init+0x118>)
 8001ec6:	f000 fc08 	bl	80026da <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001eca:	f7fe f9f3 	bl	80002b4 <__NVIC_GetPriorityGrouping>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fa43 	bl	8000360 <NVIC_EncodePriority>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4619      	mov	r1, r3
 8001ede:	2028      	movs	r0, #40	@ 0x28
 8001ee0:	f7fe fa14 	bl	800030c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ee4:	2028      	movs	r0, #40	@ 0x28
 8001ee6:	f7fe f9f3 	bl	80002d0 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	@ 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	00f00003 	.word	0x00f00003
 8001ef8:	48000800 	.word	0x48000800

08001efc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d101      	bne.n	8001f16 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40010400 	.word	0x40010400

08001f28 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001f30:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6153      	str	r3, [r2, #20]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010400 	.word	0x40010400

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f62:	bf00      	nop
 8001f64:	e7fd      	b.n	8001f62 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	bf00      	nop
 8001f6c:	e7fd      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001fb2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fb6:	f7ff ffa1 	bl	8001efc <LL_EXTI_IsActiveFlag_0_31>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001fc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fc4:	f7ff ffb0 	bl	8001f28 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <SystemInit+0x28>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd6:	4a07      	ldr	r2, [pc, #28]	@ (8001ff4 <SystemInit+0x28>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <SystemInit+0x28>)
 8001fe2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <LL_EXTI_EnableIT_0_31>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <LL_EXTI_EnableIT_0_31+0x20>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4904      	ldr	r1, [pc, #16]	@ (8002018 <LL_EXTI_EnableIT_0_31+0x20>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40010400 	.word	0x40010400

0800201c <LL_EXTI_EnableIT_32_63>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <LL_EXTI_EnableIT_32_63+0x20>)
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	4904      	ldr	r1, [pc, #16]	@ (800203c <LL_EXTI_EnableIT_32_63+0x20>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4313      	orrs	r3, r2
 800202e:	620b      	str	r3, [r1, #32]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40010400 	.word	0x40010400

08002040 <LL_EXTI_DisableIT_0_31>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <LL_EXTI_DisableIT_0_31+0x24>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	43db      	mvns	r3, r3
 8002050:	4904      	ldr	r1, [pc, #16]	@ (8002064 <LL_EXTI_DisableIT_0_31+0x24>)
 8002052:	4013      	ands	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40010400 	.word	0x40010400

08002068 <LL_EXTI_DisableIT_32_63>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <LL_EXTI_DisableIT_32_63+0x24>)
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	43db      	mvns	r3, r3
 8002078:	4904      	ldr	r1, [pc, #16]	@ (800208c <LL_EXTI_DisableIT_32_63+0x24>)
 800207a:	4013      	ands	r3, r2
 800207c:	620b      	str	r3, [r1, #32]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40010400 	.word	0x40010400

08002090 <LL_EXTI_EnableEvent_0_31>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40010400 	.word	0x40010400

080020b4 <LL_EXTI_EnableEvent_32_63>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80020be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020c0:	4904      	ldr	r1, [pc, #16]	@ (80020d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40010400 	.word	0x40010400

080020d8 <LL_EXTI_DisableEvent_0_31>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4904      	ldr	r1, [pc, #16]	@ (80020fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010400 	.word	0x40010400

08002100 <LL_EXTI_DisableEvent_32_63>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <LL_EXTI_DisableEvent_32_63+0x24>)
 800210a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	43db      	mvns	r3, r3
 8002110:	4904      	ldr	r1, [pc, #16]	@ (8002124 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002112:	4013      	ands	r3, r2
 8002114:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010400 	.word	0x40010400

08002128 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	4904      	ldr	r1, [pc, #16]	@ (8002148 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40010400 	.word	0x40010400

0800214c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002156:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002158:	4904      	ldr	r1, [pc, #16]	@ (800216c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40010400 	.word	0x40010400

08002170 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	43db      	mvns	r3, r3
 8002180:	4904      	ldr	r1, [pc, #16]	@ (8002194 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002182:	4013      	ands	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40010400 	.word	0x40010400

08002198 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80021a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010400 	.word	0x40010400

080021c0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4904      	ldr	r1, [pc, #16]	@ (80021e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40010400 	.word	0x40010400

080021e4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80021ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f0:	4904      	ldr	r1, [pc, #16]	@ (8002204 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40010400 	.word	0x40010400

08002208 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	43db      	mvns	r3, r3
 8002218:	4904      	ldr	r1, [pc, #16]	@ (800222c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800221a:	4013      	ands	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010400 	.word	0x40010400

08002230 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800223a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	43db      	mvns	r3, r3
 8002240:	4904      	ldr	r1, [pc, #16]	@ (8002254 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002242:	4013      	ands	r3, r2
 8002244:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40010400 	.word	0x40010400

08002258 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7a1b      	ldrb	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80d2 	beq.w	8002412 <LL_EXTI_Init+0x1ba>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7a5b      	ldrb	r3, [r3, #9]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d01c      	beq.n	80022b8 <LL_EXTI_Init+0x60>
 800227e:	2b02      	cmp	r3, #2
 8002280:	dc25      	bgt.n	80022ce <LL_EXTI_Init+0x76>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <LL_EXTI_Init+0x34>
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00b      	beq.n	80022a2 <LL_EXTI_Init+0x4a>
 800228a:	e020      	b.n	80022ce <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff21 	bl	80020d8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff feac 	bl	8001ff8 <LL_EXTI_EnableIT_0_31>
          break;
 80022a0:	e018      	b.n	80022d4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff feca 	bl	8002040 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff feed 	bl	8002090 <LL_EXTI_EnableEvent_0_31>
          break;
 80022b6:	e00d      	b.n	80022d4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fe9b 	bl	8001ff8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fee2 	bl	8002090 <LL_EXTI_EnableEvent_0_31>
          break;
 80022cc:	e002      	b.n	80022d4 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80022ce:	2301      	movs	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
          break;
 80022d2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7a9b      	ldrb	r3, [r3, #10]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d030      	beq.n	800233e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7a9b      	ldrb	r3, [r3, #10]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d01c      	beq.n	800231e <LL_EXTI_Init+0xc6>
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	dc25      	bgt.n	8002334 <LL_EXTI_Init+0xdc>
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d002      	beq.n	80022f2 <LL_EXTI_Init+0x9a>
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d00b      	beq.n	8002308 <LL_EXTI_Init+0xb0>
 80022f0:	e020      	b.n	8002334 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff86 	bl	8002208 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff11 	bl	8002128 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002306:	e01a      	b.n	800233e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff2f 	bl	8002170 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff52 	bl	80021c0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800231c:	e00f      	b.n	800233e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff00 	bl	8002128 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff47 	bl	80021c0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002332:	e004      	b.n	800233e <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
            break;
 800233c:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d079      	beq.n	800243a <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7a5b      	ldrb	r3, [r3, #9]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d01c      	beq.n	8002388 <LL_EXTI_Init+0x130>
 800234e:	2b02      	cmp	r3, #2
 8002350:	dc25      	bgt.n	800239e <LL_EXTI_Init+0x146>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <LL_EXTI_Init+0x104>
 8002356:	2b01      	cmp	r3, #1
 8002358:	d00b      	beq.n	8002372 <LL_EXTI_Init+0x11a>
 800235a:	e020      	b.n	800239e <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fecd 	bl	8002100 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe56 	bl	800201c <LL_EXTI_EnableIT_32_63>
          break;
 8002370:	e01a      	b.n	80023a8 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe76 	bl	8002068 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe97 	bl	80020b4 <LL_EXTI_EnableEvent_32_63>
          break;
 8002386:	e00f      	b.n	80023a8 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe45 	bl	800201c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe8c 	bl	80020b4 <LL_EXTI_EnableEvent_32_63>
          break;
 800239c:	e004      	b.n	80023a8 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
          break;
 80023a6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7a9b      	ldrb	r3, [r3, #10]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d044      	beq.n	800243a <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7a9b      	ldrb	r3, [r3, #10]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d01c      	beq.n	80023f2 <LL_EXTI_Init+0x19a>
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	dc25      	bgt.n	8002408 <LL_EXTI_Init+0x1b0>
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d002      	beq.n	80023c6 <LL_EXTI_Init+0x16e>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d00b      	beq.n	80023dc <LL_EXTI_Init+0x184>
 80023c4:	e020      	b.n	8002408 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff30 	bl	8002230 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff feb9 	bl	800214c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80023da:	e02e      	b.n	800243a <LL_EXTI_Init+0x1e2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fed9 	bl	8002198 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fefa 	bl	80021e4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80023f0:	e023      	b.n	800243a <LL_EXTI_Init+0x1e2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fea8 	bl	800214c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff feef 	bl	80021e4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002406:	e018      	b.n	800243a <LL_EXTI_Init+0x1e2>
          default:
            status |= 0x05u;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f043 0305 	orr.w	r3, r3, #5
 800240e:	60fb      	str	r3, [r7, #12]
            break;
 8002410:	e013      	b.n	800243a <LL_EXTI_Init+0x1e2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fe12 	bl	8002040 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe59 	bl	80020d8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fe1c 	bl	8002068 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe63 	bl	8002100 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <LL_GPIO_SetPinMode>:
{
 8002444:	b480      	push	{r7}
 8002446:	b08b      	sub	sp, #44	@ 0x2c
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	613b      	str	r3, [r7, #16]
  return result;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e003      	b.n	8002476 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2103      	movs	r1, #3
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	61fb      	str	r3, [r7, #28]
  return result;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	372c      	adds	r7, #44	@ 0x2c
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_GPIO_SetPinOutputType>:
{
 80024be:	b480      	push	{r7}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	605a      	str	r2, [r3, #4]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_GPIO_SetPinSpeed>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	b08b      	sub	sp, #44	@ 0x2c
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	613b      	str	r3, [r7, #16]
  return result;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2103      	movs	r1, #3
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	61fb      	str	r3, [r7, #28]
  return result;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	431a      	orrs	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]
}
 800255c:	bf00      	nop
 800255e:	372c      	adds	r7, #44	@ 0x2c
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_GPIO_SetPinPull>:
{
 8002568:	b480      	push	{r7}
 800256a:	b08b      	sub	sp, #44	@ 0x2c
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	613b      	str	r3, [r7, #16]
  return result;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e003      	b.n	800259a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2103      	movs	r1, #3
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	401a      	ands	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	61fb      	str	r3, [r7, #28]
  return result;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	60da      	str	r2, [r3, #12]
}
 80025d6:	bf00      	nop
 80025d8:	372c      	adds	r7, #44	@ 0x2c
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_GPIO_SetAFPin_0_7>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b08b      	sub	sp, #44	@ 0x2c
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	613b      	str	r3, [r7, #16]
  return result;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	210f      	movs	r1, #15
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	61fb      	str	r3, [r7, #28]
  return result;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	372c      	adds	r7, #44	@ 0x2c
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_GPIO_SetAFPin_8_15>:
{
 800265c:	b480      	push	{r7}
 800265e:	b08b      	sub	sp, #44	@ 0x2c
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	613b      	str	r3, [r7, #16]
  return result;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	210f      	movs	r1, #15
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	61fb      	str	r3, [r7, #28]
  return result;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	431a      	orrs	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026ce:	bf00      	nop
 80026d0:	372c      	adds	r7, #44	@ 0x2c
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b088      	sub	sp, #32
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	60fb      	str	r3, [r7, #12]
  return result;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <LL_GPIO_Init+0x26>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e003      	b.n	8002708 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800270a:	e048      	b.n	800279e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d03a      	beq.n	8002798 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d003      	beq.n	8002732 <LL_GPIO_Init+0x58>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d10e      	bne.n	8002750 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	461a      	mov	r2, r3
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fed7 	bl	80024ee <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	461a      	mov	r2, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff feb7 	bl	80024be <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	461a      	mov	r2, r3
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff05 	bl	8002568 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d111      	bne.n	800278a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2bff      	cmp	r3, #255	@ 0xff
 800276a:	d807      	bhi.n	800277c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	461a      	mov	r2, r3
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff34 	bl	80025e2 <LL_GPIO_SetAFPin_0_7>
 800277a:	e006      	b.n	800278a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	461a      	mov	r2, r3
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff69 	bl	800265c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fe56 	bl	8002444 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3301      	adds	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1af      	bne.n	800270c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	4a07      	ldr	r2, [pc, #28]	@ (80027e8 <LL_InitTick+0x30>)
 80027cc:	3b01      	subs	r3, #1
 80027ce:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <LL_InitTick+0x30>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <LL_InitTick+0x30>)
 80027d8:	2205      	movs	r2, #5
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e010 	.word	0xe000e010

080027ec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffdd 	bl	80027b8 <LL_InitTick>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002810:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <LL_mDelay+0x4c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002816:	68bb      	ldr	r3, [r7, #8]
  tmpDelay = Delay;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d00c      	beq.n	800283e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800282a:	e008      	b.n	800283e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <LL_mDelay+0x4c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3b01      	subs	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f3      	bne.n	800282c <LL_mDelay+0x24>
    }
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <LL_SetSystemCoreClock+0x1c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000000 	.word	0x20000000

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	4d0d      	ldr	r5, [pc, #52]	@ (80028b0 <__libc_init_array+0x38>)
 800287c:	4c0d      	ldr	r4, [pc, #52]	@ (80028b4 <__libc_init_array+0x3c>)
 800287e:	1b64      	subs	r4, r4, r5
 8002880:	10a4      	asrs	r4, r4, #2
 8002882:	2600      	movs	r6, #0
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	4d0b      	ldr	r5, [pc, #44]	@ (80028b8 <__libc_init_array+0x40>)
 800288a:	4c0c      	ldr	r4, [pc, #48]	@ (80028bc <__libc_init_array+0x44>)
 800288c:	f000 f818 	bl	80028c0 <_init>
 8002890:	1b64      	subs	r4, r4, r5
 8002892:	10a4      	asrs	r4, r4, #2
 8002894:	2600      	movs	r6, #0
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002994 	.word	0x08002994
 80028b4:	08002994 	.word	0x08002994
 80028b8:	08002994 	.word	0x08002994
 80028bc:	08002998 	.word	0x08002998

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr
